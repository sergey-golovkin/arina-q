SET GLOBAL log_bin_trust_function_creators = 1;
~
CREATE TABLE EXT_TYPES
(
  SYS_ID VARCHAR(32) NOT NULL,
  DATA_TYPE INTEGER NOT NULL,
  DESCRIPTION VARCHAR(1024)  NOT NULL,
  PRIMARY KEY (SYS_ID, DATA_TYPE)
)
~
CREATE TABLE TYPES
(
  DATA_TYPE INTEGER NOT NULL,
  DESCRIPTION VARCHAR(1024)  NOT NULL,
  PRIMARY KEY (DATA_TYPE)
)
~
CREATE TABLE DATA_IN_MSG
(
  MSG_ID      BIGINT AUTO_INCREMENT  NOT NULL,
  DATA_VALUE  LONGTEXT          NOT NULL,
  META_INFO   LONGTEXT,
  EXPIRE_DATE DATETIME(6),
  PRIMARY KEY (MSG_ID)
) ROW_FORMAT = COMPRESSED
~
CREATE TABLE DATA_IN
(
  DATA_IN_ID  BIGINT  NOT NULL,
  DATA_OUT_ID BIGINT           NOT NULL,
  SYS_ID      VARCHAR(32)      NOT NULL,
  DATA_TYPE   INTEGER          NOT NULL,
  RECORD_DATE DATETIME(6)      NOT NULL,
  SUBQ_ID     BIGINT DEFAULT 0 NOT NULL,
  MSG_ID      BIGINT           NOT NULL,
  REPLACE_ID  VARCHAR(100),
  PRIMARY KEY (DATA_IN_ID)
)
~
CREATE UNIQUE INDEX UI_DATA_IN_1 ON DATA_IN (SUBQ_ID, DATA_IN_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX UI_DATA_IN_2 ON DATA_IN (SUBQ_ID, SYS_ID, DATA_IN_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX UI_DATA_IN_3 ON DATA_IN (REPLACE_ID)
~
ALTER TABLE DATA_IN
ADD FOREIGN KEY (DATA_TYPE)
REFERENCES TYPES (DATA_TYPE)
~
CREATE TABLE DATA_IN_LOG
(
  DATA_IN_ID    BIGINT                              NOT NULL,
  DATA_OUT_ID   BIGINT                              NOT NULL,
  SYS_ID        VARCHAR(32)                         NOT NULL,
  DATA_TYPE     INTEGER                             NOT NULL,
  RECORD_DATE   DATETIME(6)                         NOT NULL,
  SUBQ_ID       BIGINT                              NOT NULL,
  MSG_ID        BIGINT                              NOT NULL,
  TRANSFER_DATE DATETIME(6)                         NOT NULL,
  REPLACE_ID  VARCHAR(100)
)
~
CREATE UNIQUE INDEX UI_DATA_IN_LOG_1 ON DATA_IN_LOG (TRANSFER_DATE, DATA_IN_ID)
~
CREATE TABLE DATA_IN_LOG_ARCHIVE
(
  DATA_IN_ID    BIGINT                              NOT NULL,
  DATA_OUT_ID   BIGINT                              NOT NULL,
  SYS_ID        VARCHAR(32)                         NOT NULL,
  DATA_TYPE     INTEGER                             NOT NULL,
  RECORD_DATE   DATETIME(6)                         NOT NULL,
  SUBQ_ID       BIGINT                              NOT NULL,
  MSG_ID        BIGINT                              NOT NULL,
  TRANSFER_DATE DATETIME(6)                         NOT NULL,
  REPLACE_ID  VARCHAR(100)
)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_1 ON DATA_IN_LOG_ARCHIVE (DATA_IN_ID)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_2 ON DATA_IN_LOG_ARCHIVE (DATA_OUT_ID, SYS_ID)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_3 ON DATA_IN_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_4 ON DATA_IN_LOG_ARCHIVE (RECORD_DATE)
~
CREATE TABLE DATA_IN_ERRORS
(
  DATA_IN_ID BIGINT NOT NULL,
  ERROR_DATE DATETIME(6) NOT NULL,
  ERROR_CODE INTEGER DEFAULT 0 NOT NULL,
  ERROR_TEXT LONGTEXT
) ROW_FORMAT = COMPRESSED
~
CREATE INDEX I_DATA_IN_ERRORS_1 ON DATA_IN_ERRORS (ERROR_DATE)
~
CREATE INDEX I_DATA_IN_ERRORS_2 ON DATA_IN_ERRORS (DATA_IN_ID)
~
CREATE INDEX I_DATA_IN_ERRORS_3 ON DATA_IN_ERRORS (ERROR_CODE)
~
CREATE TABLE DATA_OUT_MSG
(
  MSG_ID      BIGINT AUTO_INCREMENT NOT NULL,
  DATA_VALUE  LONGTEXT              NOT NULL,
  META_INFO   LONGTEXT,
  EXPIRE_DATE DATETIME(6),
  PRIMARY KEY (MSG_ID)
) ROW_FORMAT = COMPRESSED
~
CREATE TABLE DATA_OUT
(
  DATA_OUT_ID BIGINT AUTO_INCREMENT NOT NULL,
  SYS_ID      VARCHAR(32)           NOT NULL,
  DATA_TYPE   INTEGER               NOT NULL,
  RECORD_DATE DATETIME(6)           NOT NULL,
  MSG_ID      BIGINT                NOT NULL,
  REPLACE_ID  VARCHAR(100),
  TRANS_ID    VARCHAR(50),
  TRANS_SEQ_NO BIGINT,
  TRANS_TTL   DATETIME(6) DEFAULT '3000-01-01 00:00:00' NOT NULL,
  PRIMARY KEY (DATA_OUT_ID)
)
~
CREATE UNIQUE INDEX UI_DATA_OUT_1 ON DATA_OUT (TRANS_TTL, DATA_OUT_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX UI_DATA_OUT_2 ON DATA_OUT (TRANS_TTL, SYS_ID, DATA_OUT_ID, DATA_TYPE)
~
CREATE INDEX UI_DATA_OUT_3 ON DATA_OUT (TRANS_ID)
~
ALTER TABLE DATA_OUT
ADD FOREIGN KEY (SYS_ID, DATA_TYPE)
REFERENCES EXT_TYPES (SYS_ID, DATA_TYPE)
~
CREATE TABLE DATA_OUT_LOG
(
  DATA_OUT_ID   BIGINT              NOT NULL,
  SYS_ID        VARCHAR(32)         NOT NULL,
  DATA_TYPE     INTEGER             NOT NULL,
  RECORD_DATE   DATETIME(6)         NOT NULL,
  MSG_ID        BIGINT              NOT NULL,
  TRANSFER_DATE DATETIME(6)         NOT NULL,
  REPLACE_ID    VARCHAR(100)
)
~
CREATE UNIQUE INDEX UI_DATA_OUT_LOG_1 ON DATA_OUT_LOG (TRANSFER_DATE, DATA_OUT_ID)
~
CREATE TABLE DATA_OUT_LOG_ARCHIVE
(
  DATA_OUT_ID   BIGINT              NOT NULL,
  SYS_ID        VARCHAR(32)         NOT NULL,
  DATA_TYPE     INTEGER             NOT NULL,
  RECORD_DATE   DATETIME(6)        NOT NULL,
  MSG_ID        BIGINT              NOT NULL,
  TRANSFER_DATE DATETIME(6)        NOT NULL,
  REPLACE_ID    VARCHAR(100)
)
~
CREATE INDEX I_DATA_OUT_LOG_ARCHIVE_1 ON DATA_OUT_LOG_ARCHIVE (DATA_OUT_ID)
~
CREATE INDEX I_DATA_OUT_LOG_ARCHIVE_2 ON DATA_OUT_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE INDEX I_DATA_OUT_LOG_ARCHIVE_3 ON DATA_OUT_LOG_ARCHIVE (RECORD_DATE)
~
CREATE TABLE DATA_OUT_ERRORS
(
  DATA_OUT_ID BIGINT NOT NULL,
  ERROR_DATE DATETIME(6) NOT NULL,
  ERROR_CODE INTEGER DEFAULT 0 NOT NULL,
  ERROR_TEXT LONGTEXT
) ROW_FORMAT = COMPRESSED
~
CREATE INDEX I_DATA_OUT_ERRORS_1 ON DATA_OUT_ERRORS (ERROR_DATE)
~
CREATE INDEX I_DATA_OUT_ERRORS_2 ON DATA_OUT_ERRORS (DATA_OUT_ID)
~
CREATE INDEX I_DATA_OUT_ERRORS_3 ON DATA_OUT_ERRORS (ERROR_CODE)
~
CREATE PROCEDURE GET_IN_VALUE_3_11(P_SYS_ID VARCHAR(4000), P_DATA_TYPES VARCHAR(4000), P_SUBQ_ID BIGINT)
BEGIN
	SELECT
          NULL ROW_ID,
          DATA_IN_ID,
          DATA_OUT_ID,
          SYS_ID,
          '<SYSID>' SYS_2_ID,
          DATA_TYPE,
          DATA_VALUE,
          META_INFO,
          RECORD_DATE,
          EXPIRE_DATE,
          REPLACE_ID
        FROM DATA_IN, DATA_IN_MSG
    	  WHERE
           (CONCAT('''', REPLACE(REPLACE(REPLACE(P_SYS_ID, ';', ','), ' ', ''), ',', ''','''), '''') LIKE CONCAT('%''', SYS_ID, '''%') OR P_SYS_ID IS NULL) AND
           (CONCAT('''', REPLACE(REPLACE(REPLACE(P_DATA_TYPES, ';', ','), ' ', ''), ',', ''','''), '''') LIKE CONCAT('%''', DATA_TYPE, '''%') OR P_DATA_TYPES IS NULL) AND
           SUBQ_ID = P_SUBQ_ID  AND DATA_IN.MSG_ID = DATA_IN_MSG.MSG_ID
        ORDER BY DATA_IN_ID ASC LIMIT 1;
END;
~
CREATE PROCEDURE GET_OUT_VALUE_2_11(P_SYS_ID VARCHAR(4000), P_DATA_TYPES VARCHAR(4000))
BEGIN
	SELECT
          NULL ROW_ID,
          NULL DATA_IN_ID,
          DATA_OUT_ID,
          '<SYSID>' SYS_ID,
          SYS_ID SYS_2_ID,
          DATA_TYPE,
          DATA_VALUE,
          META_INFO,
          RECORD_DATE,
          EXPIRE_DATE,
          REPLACE_ID
        FROM DATA_OUT, DATA_OUT_MSG
    	  WHERE
           DATA_OUT.MSG_ID = DATA_OUT_MSG.MSG_ID AND
           TRANS_TTL = '3000-01-01 00:00:00' AND
           (CONCAT('''', REPLACE(REPLACE(REPLACE(P_SYS_ID, ';', ','), ' ', ''), ',', ''','''), '''') LIKE CONCAT('%''', SYS_ID, '''%') OR P_SYS_ID IS NULL) AND
           (CONCAT('''', REPLACE(REPLACE(REPLACE(P_DATA_TYPES, ';', ','), ' ', ''), ',', ''','''), '''') LIKE CONCAT('%''', DATA_TYPE, '''%') OR P_DATA_TYPES IS NULL)
        ORDER BY DATA_OUT_ID ASC LIMIT 1;
END;
~
CREATE PROCEDURE COMMIT_IN_PROCESSING_4(P_DATA_IN_ID BIGINT, P_RECORD_DATE DATETIME(6), P_ERROR_TEXT LONGTEXT, P_ROW_ID VARCHAR(128))
BEGIN
    DECLARE V_TRANSFER_DATE DATETIME(6);

    SET V_TRANSFER_DATE = CURRENT_TIMESTAMP(6);

    IF P_ERROR_TEXT IS NOT NULL THEN
        INSERT INTO DATA_IN_ERRORS (DATA_IN_ID, ERROR_DATE, ERROR_TEXT) VALUES (P_DATA_IN_ID, V_TRANSFER_DATE, P_ERROR_TEXT);
    END IF;

    INSERT INTO DATA_IN_LOG (DATA_IN_ID,
                                       DATA_OUT_ID,
                                       SYS_ID,
                                       DATA_TYPE,
                                       RECORD_DATE,
                                       SUBQ_ID,
                                       MSG_ID,
                                       TRANSFER_DATE,
                                       REPLACE_ID)
    SELECT
        DATA_IN_ID,
        DATA_OUT_ID,
        SYS_ID,
        DATA_TYPE,
        RECORD_DATE,
        SUBQ_ID,
        MSG_ID,
        V_TRANSFER_DATE,
        REPLACE_ID
    FROM DATA_IN
    WHERE DATA_IN_ID = P_DATA_IN_ID AND RECORD_DATE = P_RECORD_DATE;

    DELETE FROM DATA_IN WHERE DATA_IN_ID = P_DATA_IN_ID AND RECORD_DATE = P_RECORD_DATE;
END;
~
CREATE PROCEDURE ROLLBACK_IN_PROCESSING_4(P_DATA_IN_ID BIGINT, P_ERROR_CODE INTEGER, P_ERROR_TEXT LONGTEXT, P_ROW_ID VARCHAR(128))
BEGIN
  INSERT INTO DATA_IN_ERRORS (DATA_IN_ID, ERROR_CODE, ERROR_TEXT, ERROR_DATE) VALUES (P_DATA_IN_ID, P_ERROR_CODE, P_ERROR_TEXT, CURRENT_TIMESTAMP(6));
END;
~
CREATE PROCEDURE COMMIT_OUT_PROCESSING_3(P_DATA_OUT_ID BIGINT, P_ERROR_TEXT LONGTEXT, P_ROW_ID VARCHAR(128))
BEGIN
    DECLARE V_TRANSFER_DATE DATETIME(6);

    SET V_TRANSFER_DATE = CURRENT_TIMESTAMP(6);

    IF P_ERROR_TEXT IS NOT NULL THEN
        INSERT INTO DATA_OUT_ERRORS (DATA_OUT_ID, ERROR_DATE, ERROR_TEXT) VALUES (P_DATA_OUT_ID, V_TRANSFER_DATE, P_ERROR_TEXT);
    END IF;

    INSERT INTO DATA_OUT_LOG (DATA_OUT_ID,
                                        SYS_ID,
                                        DATA_TYPE,
                                        RECORD_DATE,
                                        MSG_ID,
                                        TRANSFER_DATE,
                                        REPLACE_ID)
    SELECT
      DATA_OUT_ID,
      SYS_ID,
      DATA_TYPE,
      RECORD_DATE,
      MSG_ID,
      V_TRANSFER_DATE,
      REPLACE_ID
    FROM DATA_OUT
    WHERE DATA_OUT_ID = P_DATA_OUT_ID;

    DELETE FROM DATA_OUT WHERE DATA_OUT_ID = P_DATA_OUT_ID;
END;
~
CREATE PROCEDURE ROLLBACK_OUT_PROCESSING_4(P_DATA_OUT_ID BIGINT, P_ERROR_CODE INTEGER, P_ERROR_TEXT LONGTEXT, P_ROW_ID VARCHAR(128))
BEGIN
  INSERT INTO DATA_OUT_ERRORS (DATA_OUT_ID, ERROR_CODE, ERROR_TEXT, ERROR_DATE) VALUES (P_DATA_OUT_ID, P_ERROR_CODE, P_ERROR_TEXT, CURRENT_TIMESTAMP(6));
END;
~
CREATE PROCEDURE CHANGE_IN_SUBQ_3(P_SUBQ_ID BIGINT, P_DATA_IN_ID BIGINT, P_ROW_ID VARCHAR(128))
BEGIN
    UPDATE DATA_IN SET SUBQ_ID = P_SUBQ_ID WHERE DATA_IN_ID = P_DATA_IN_ID;
END;
~
CREATE FUNCTION PUT_OUT_VALUE_9_1(P_SYS_ID VARCHAR(32), P_DATA_TYPE INTEGER, P_DATA_VALUE LONGTEXT, P_META_INFO LONGTEXT, P_EXPIRE_DATE DATETIME(6), P_REPLACE_ID VARCHAR(100), P_TRANS_ID VARCHAR(50), P_TRANS_SEQ_NO BIGINT, P_TRANS_TTL_SECONDS BIGINT) RETURNS BIGINT
BEGIN
  DECLARE V_MSG_ID BIGINT;
  DECLARE V_TMP DATETIME(6);

  INSERT INTO DATA_OUT_MSG(DATA_VALUE, META_INFO, EXPIRE_DATE) VALUES (P_DATA_VALUE, P_META_INFO, P_EXPIRE_DATE);
  SET V_MSG_ID = LAST_INSERT_ID();

  SET V_TMP = '3000-01-01 00:00:00';
  IF P_TRANS_ID IS NOT NULL THEN
    SELECT COALESCE(MIN(TRANS_TTL), TIMESTAMPADD(SECOND, COALESCE(P_TRANS_TTL_SECONDS, 3600), CURRENT_TIMESTAMP(6))) INTO V_TMP FROM DATA_OUT WHERE TRANS_ID = P_TRANS_ID AND TRANS_TTL < '3000-01-01 00:00:00';
  END IF;

  IF P_SYS_ID IS NULL OR P_SYS_ID = 'ANY$Y$TEM' THEN
    INSERT INTO DATA_OUT(SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) SELECT SYS_ID, P_DATA_TYPE, CURRENT_TIMESTAMP(6), V_MSG_ID, P_REPLACE_ID, P_TRANS_ID, COALESCE(P_TRANS_SEQ_NO, V_MSG_ID), V_TMP FROM EXT_TYPES WHERE DATA_TYPE = P_DATA_TYPE;
  ELSE
    INSERT INTO DATA_OUT(SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) VALUES (P_SYS_ID, P_DATA_TYPE, CURRENT_TIMESTAMP(6), V_MSG_ID, P_REPLACE_ID, P_TRANS_ID, COALESCE(P_TRANS_SEQ_NO, V_MSG_ID), V_TMP);
  END IF;

  RETURN V_MSG_ID;
END;
~
CREATE FUNCTION PUT_IN_VALUE_9_1(P_SYS_ID VARCHAR(32), P_DATA_OUT_ID BIGINT, P_DATA_TYPE INTEGER, P_DATA_VALUE LONGTEXT, P_RECORD_DATE DATETIME(6), P_SUBQ_ID BIGINT, P_META_INFO LONGTEXT, P_EXPIRE_DATE DATETIME(6), P_REPLACE_ID VARCHAR(100)) RETURNS BIGINT
BEGIN
  DECLARE V_MSG_ID      BIGINT;
  DECLARE V_DATA_IN_ID  BIGINT;
  DECLARE V_RECORD_DATE DATETIME(6);
  DECLARE V_SUBQ_ID     BIGINT;

  DECLARE CONTINUE HANDLER FOR SQLSTATE '23000'
  BEGIN
       SELECT DATA_IN_ID, RECORD_DATE, SUBQ_ID INTO V_DATA_IN_ID, V_RECORD_DATE, V_SUBQ_ID FROM DATA_IN WHERE REPLACE_ID = P_REPLACE_ID;
       CALL COMMIT_IN_PROCESSING_4(V_DATA_IN_ID, V_RECORD_DATE, 'Message replaced!', NULL);
       INSERT INTO DATA_IN(DATA_IN_ID, SYS_ID, DATA_OUT_ID, DATA_TYPE, RECORD_DATE, SUBQ_ID, MSG_ID, REPLACE_ID) VALUES (V_DATA_IN_ID, P_SYS_ID, P_DATA_OUT_ID, P_DATA_TYPE, COALESCE(P_RECORD_DATE, CURRENT_TIMESTAMP(6)), COALESCE(V_SUBQ_ID, 0), V_MSG_ID, P_REPLACE_ID);
       RETURN V_MSG_ID;
  END;

  INSERT INTO DATA_IN_MSG(DATA_VALUE, META_INFO, EXPIRE_DATE) VALUES (P_DATA_VALUE, P_META_INFO, P_EXPIRE_DATE);
  SET V_MSG_ID = LAST_INSERT_ID();

  INSERT INTO DATA_IN(DATA_IN_ID, SYS_ID, DATA_OUT_ID, DATA_TYPE, RECORD_DATE, SUBQ_ID, MSG_ID, REPLACE_ID) VALUES (V_MSG_ID, P_SYS_ID, P_DATA_OUT_ID, P_DATA_TYPE, COALESCE(P_RECORD_DATE, CURRENT_TIMESTAMP(6)), COALESCE(P_SUBQ_ID, 0), V_MSG_ID, P_REPLACE_ID);

  RETURN V_MSG_ID;
END;
~
CREATE PROCEDURE SEND_OUT_TRANS_1(P_TRANS_ID VARCHAR(50))
BEGIN
    INSERT INTO DATA_OUT(SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) SELECT SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, '3000-01-01 00:00:00' FROM DATA_OUT WHERE TRANS_ID = P_TRANS_ID AND TRANS_TTL < '3000-01-01 00:00:00' ORDER BY TRANS_SEQ_NO;
    DELETE FROM DATA_OUT WHERE TRANS_ID = P_TRANS_ID AND TRANS_TTL < '3000-01-01 00:00:00';
END;
~
CREATE FUNCTION MOVE_DATA_IN_TO_LOG (P_ROWS INTEGER) RETURNS INTEGER
BEGIN
   DECLARE V_COUNT      INTEGER;
   DECLARE V_DATA_IN_ID BIGINT;
   DECLARE V_TRANSFER_DATE DATETIME(6);

   DECLARE CONTINUE HANDLER FOR NOT FOUND
   BEGIN
       SET V_DATA_IN_ID = NULL;
   END;

   SET V_COUNT = 0;

   IF (SELECT GET_LOCK('Q_<SYSID>_MOVE_DATA_IN_TO_LOG',10) = 1)
   THEN
      BEGIN
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
            DO RELEASE_LOCK('Q_<SYSID>_MOVE_DATA_IN_TO_LOG');
  	    END;

        L1: WHILE V_COUNT < P_ROWS DO
            SELECT DATA_IN_ID, TRANSFER_DATE INTO V_DATA_IN_ID, V_TRANSFER_DATE FROM DATA_IN_LOG LIMIT 1;
            IF V_DATA_IN_ID IS NULL THEN
				LEAVE L1;
			END IF;

            INSERT INTO DATA_IN_LOG_ARCHIVE
            (
                DATA_IN_ID,
                DATA_OUT_ID,
                SYS_ID,
                DATA_TYPE,
                RECORD_DATE,
                TRANSFER_DATE,
                SUBQ_ID,
                MSG_ID,
                REPLACE_ID
            )
            SELECT
                DATA_IN_ID,
                DATA_OUT_ID,
                SYS_ID,
                DATA_TYPE,
                RECORD_DATE,
                TRANSFER_DATE,
                SUBQ_ID,
                MSG_ID,
                REPLACE_ID
            FROM DATA_IN_LOG
            WHERE DATA_IN_ID = V_DATA_IN_ID AND TRANSFER_DATE = V_TRANSFER_DATE;

            DELETE FROM DATA_IN_LOG WHERE DATA_IN_ID = V_DATA_IN_ID AND TRANSFER_DATE = V_TRANSFER_DATE;

            SET V_COUNT = V_COUNT + 1;
         END WHILE L1;

         DO RELEASE_LOCK('Q_<SYSID>_MOVE_DATA_IN_TO_LOG');
      END;
   END IF;
   RETURN V_COUNT;
END;
~
CREATE FUNCTION MOVE_DATA_OUT_TO_LOG (P_ROWS INTEGER) RETURNS INTEGER
BEGIN
   DECLARE V_COUNT      INTEGER;
   DECLARE V_COUNT2     INTEGER;
   DECLARE V_DATA_OUT_ID BIGINT;
   DECLARE V_TRANSFER_DATE DATETIME(6);
   DECLARE V_TRANS_ID VARCHAR(50);

   DECLARE CONTINUE HANDLER FOR NOT FOUND
   BEGIN
       SET V_DATA_OUT_ID = NULL;
   END;

   SET V_COUNT = 0;
   SET V_COUNT2 = 0;

   IF (SELECT GET_LOCK('Q_<SYSID>_MOVE_DATA_OUT_TO_LOG',10) = 1)
   THEN
      BEGIN
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
            DO RELEASE_LOCK('Q_<SYSID>_MOVE_DATA_OUT_TO_LOG');
  	    END;

        L1: WHILE V_COUNT < P_ROWS DO
            SELECT DATA_OUT_ID, TRANSFER_DATE INTO V_DATA_OUT_ID, V_TRANSFER_DATE FROM DATA_OUT_LOG LIMIT 1;
            IF V_DATA_OUT_ID IS NULL THEN
				LEAVE L1;
			END IF;

            INSERT INTO DATA_OUT_LOG_ARCHIVE
            (
                DATA_OUT_ID,
                SYS_ID,
                DATA_TYPE,
                RECORD_DATE,
                TRANSFER_DATE,
                MSG_ID,
                REPLACE_ID
            )
            SELECT
                DATA_OUT_ID,
                SYS_ID,
                DATA_TYPE,
                RECORD_DATE,
                TRANSFER_DATE,
                MSG_ID,
                REPLACE_ID
            FROM DATA_OUT_LOG
            WHERE DATA_OUT_ID = V_DATA_OUT_ID AND TRANSFER_DATE = V_TRANSFER_DATE;

            DELETE FROM DATA_OUT_LOG WHERE DATA_OUT_ID = V_DATA_OUT_ID AND TRANSFER_DATE = V_TRANSFER_DATE;

            SET V_COUNT = V_COUNT + 1;
         END WHILE L1;

        L2: WHILE V_COUNT2 < P_ROWS DO
            SELECT DATA_OUT_ID, TRANS_ID INTO V_DATA_OUT_ID, V_TRANS_ID FROM DATA_OUT WHERE TRANS_TTL < CURRENT_TIMESTAMP(6) LIMIT 1;
            IF V_DATA_OUT_ID IS NULL THEN
				LEAVE L2;
			END IF;

            CALL COMMIT_OUT_PROCESSING_3(V_DATA_OUT_ID, CONCAT('Trans lost! TransId = {', V_TRANS_ID, '}') , NULL);

            SET V_COUNT2 = V_COUNT2 + 1;
         END WHILE L2;

         DO RELEASE_LOCK('Q_<SYSID>_MOVE_DATA_OUT_TO_LOG');
      END;
   END IF;
   RETURN (V_COUNT + V_COUNT2);
END;
~
CREATE PROCEDURE GET_VALUE(P_SYS_ID VARCHAR(4000), P_DATA_TYPES VARCHAR(4000), P_SUBQ_ID BIGINT)
BEGIN
    CALL GET_IN_VALUE_3_11(P_SYS_ID, P_DATA_TYPES, P_SUBQ_ID);
END;
~
CREATE FUNCTION PUT_VALUE(P_SYS_ID VARCHAR(32), P_DATA_TYPE INTEGER, P_DATA_VALUE LONGTEXT, P_META_INFO LONGTEXT, P_EXPIRE_DATE DATETIME(6), P_REPLACE_ID VARCHAR(100), P_TRANS_ID VARCHAR(50), P_TRANS_SEQ_NO BIGINT, P_TRANS_TTL_SECONDS BIGINT) RETURNS BIGINT
BEGIN
	RETURN PUT_OUT_VALUE_9_1(P_SYS_ID, P_DATA_TYPE, P_DATA_VALUE, P_META_INFO, P_EXPIRE_DATE, P_REPLACE_ID, P_TRANS_ID, P_TRANS_SEQ_NO, P_TRANS_TTL_SECONDS);
END;
~
CREATE PROCEDURE COMMIT_PROCESSING(P_DATA_IN_ID BIGINT, P_RECORD_DATE DATETIME(6), P_ERROR_TEXT LONGTEXT, P_ROW_ID VARCHAR(128))
BEGIN
	CALL COMMIT_IN_PROCESSING_4(P_DATA_IN_ID, P_RECORD_DATE, P_ERROR_TEXT, P_ROW_ID);
END;
~
CREATE PROCEDURE ROLLBACK_PROCESSING(P_DATA_IN_ID BIGINT, P_ERROR_CODE INTEGER, P_ERROR_TEXT LONGTEXT, P_ROW_ID VARCHAR(128))
BEGIN
	CALL ROLLBACK_IN_PROCESSING_4(P_DATA_IN_ID, P_ERROR_CODE, P_ERROR_TEXT, P_ROW_ID);
END;
~
CREATE PROCEDURE SEND_OUT_TRANS(P_TRANS_ID VARCHAR(50))
BEGIN
    CALL SEND_OUT_TRANS_1(P_TRANS_ID);
END;
~
CREATE USER 'Q_<SYSID>_SVC' IDENTIFIED BY '<PASSWORD>'
~
GRANT ALL ON PROCEDURE GET_IN_VALUE_3_11 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE GET_OUT_VALUE_2_11 TO Q_<SYSID>_SVC
~
GRANT ALL ON FUNCTION  PUT_OUT_VALUE_9_1 TO Q_<SYSID>_SVC
~
GRANT ALL ON FUNCTION  PUT_IN_VALUE_9_1 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE COMMIT_IN_PROCESSING_4 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE COMMIT_OUT_PROCESSING_3 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE ROLLBACK_IN_PROCESSING_4 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE ROLLBACK_OUT_PROCESSING_4 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE CHANGE_IN_SUBQ_3 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE SEND_OUT_TRANS_1 TO Q_<SYSID>_SVC
~
GRANT ALL ON FUNCTION MOVE_DATA_IN_TO_LOG TO Q_<SYSID>_SVC
~
GRANT ALL ON FUNCTION MOVE_DATA_OUT_TO_LOG TO Q_<SYSID>_SVC
~