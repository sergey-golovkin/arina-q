CREATE TABLE STAGES_MSG
(
  MSG_ID BIGINT AUTO_INCREMENT NOT NULL,
  STAGE_XML LONGTEXT,
  META_INFO LONGTEXT,
  PRIMARY KEY (MSG_ID)
) ROW_FORMAT = COMPRESSED
~
CREATE TABLE STAGES
(
  REQUEST_ID BIGINT NOT NULL,
  REQUEST_DATE DATETIME(6) NOT NULL,
  MSG_ID BIGINT NOT NULL,
  EXT_ID VARCHAR(50),
  SYS_ID VARCHAR(50),
  STAGE_DATE DATETIME(6) NOT NULL,
  STAGE VARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  PROCESS_AFTER DATETIME(6) NOT NULL,
  DEP_ID VARCHAR(100),
  PARENT_DEP_ID VARCHAR(4000),
  PRIMARY KEY (REQUEST_ID)
)
~
CREATE INDEX I_STAGES_1 ON STAGES (PROCESS_AFTER, STAGE, SYS_ID)
~
CREATE INDEX I_STAGES_2 ON STAGES (DEP_ID)
~
CREATE TABLE STAGES_LOG
(
  REQUEST_ID BIGINT NOT NULL,
  REQUEST_DATE DATETIME(6) NOT NULL,
  MSG_ID BIGINT NOT NULL,
  EXT_ID VARCHAR(50),
  SYS_ID VARCHAR(50),
  STAGE_DATE DATETIME(6) NOT NULL,
  STAGE VARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  PROCESS_AFTER DATETIME(6) NOT NULL,
  DEP_ID  VARCHAR(100),
  PARENT_DEP_ID  VARCHAR(4000),
  TRANSFER_DATE DATETIME(6) NOT NULL,
  FINAL INTEGER DEFAULT 0 NOT NULL CHECK (FINAL IN(1, 0))
)
~
CREATE INDEX I_STAGES_LOG_1 ON STAGES_LOG (REQUEST_ID)
~
CREATE TABLE STAGES_LOG_ARCHIVE
(
  REQUEST_ID BIGINT NOT NULL,
  REQUEST_DATE DATETIME(6) NOT NULL,
  MSG_ID BIGINT NOT NULL,
  EXT_ID VARCHAR(50),
  SYS_ID VARCHAR(50),
  STAGE_DATE DATETIME(6) NOT NULL,
  STAGE VARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  PROCESS_AFTER DATETIME(6) NOT NULL,
  DEP_ID  VARCHAR(100),
  PARENT_DEP_ID  VARCHAR(4000),
  TRANSFER_DATE DATETIME(6) NOT NULL,
  FINAL INTEGER NOT NULL
)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_1 ON STAGES_LOG_ARCHIVE (REQUEST_ID, FINAL)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_2 ON STAGES_LOG_ARCHIVE (REQUEST_DATE)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_3 ON STAGES_LOG_ARCHIVE (EXT_ID, SYS_ID)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_4 ON STAGES_LOG_ARCHIVE (STAGE_DATE, REQUEST_ID)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_5 ON STAGES_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE TABLE STAGES_ERRORS
(
  REQUEST_ID BIGINT NOT NULL,
  STAGE VARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  ERROR_DATE DATETIME(6) NOT NULL,
  ERROR_CODE INTEGER DEFAULT 0 NOT NULL,
  ERROR_TEXT LONGTEXT
) ROW_FORMAT = COMPRESSED
~
CREATE INDEX I_STAGES_ERRORS_1 ON STAGES_ERRORS (REQUEST_ID, STAGE)
~
CREATE INDEX I_STAGES_ERRORS_2 ON STAGES_ERRORS (ERROR_CODE)
~
CREATE INDEX I_STAGES_ERRORS_3 ON STAGES_ERRORS (ERROR_DATE)
~
CREATE TABLE STAGES_DEPS
(
  REQUEST_ID BIGINT NOT NULL,
  PARENT_REQUEST_ID BIGINT NOT NULL
)
~
CREATE INDEX I_STAGES_DEPS_1 ON STAGES_DEPS (REQUEST_ID)
~
CREATE INDEX I_STAGES_DEPS_2 ON STAGES_DEPS (PARENT_REQUEST_ID)
~
ALTER TABLE STAGES_DEPS ADD
 FOREIGN KEY (REQUEST_ID)
 REFERENCES STAGES (REQUEST_ID)
 ON DELETE CASCADE
~
ALTER TABLE STAGES_DEPS ADD
 FOREIGN KEY (PARENT_REQUEST_ID)
 REFERENCES STAGES (REQUEST_ID)
 ON DELETE CASCADE
~
CREATE FUNCTION PUT_STAGE_VALUE_11_1
(
  P_EXT_ID VARCHAR(50),
  P_SYS_ID VARCHAR(50),
  P_REQUEST_ID BIGINT,
  P_STAGE_XML LONGTEXT,
  P_STAGE VARCHAR(50),
  P_PROCESS_AFTER_DELAY BIGINT,
  P_FINAL INTEGER,
  P_DEP_ID VARCHAR(100),
  P_PARENT_DEP_ID VARCHAR(4000),
  P_META_INFO LONGTEXT
) RETURNS BIGINT
BEGIN
    DECLARE V_MSG_ID BIGINT;
    DECLARE I INTEGER;
    DECLARE TMP VARCHAR(100);
    DECLARE V_TRANSFER_DATE DATETIME(6);

    INSERT INTO STAGES_MSG
    (
      STAGE_XML,
      META_INFO
    )
    VALUES
    (
      P_STAGE_XML,
      P_META_INFO
    );
    SET V_MSG_ID = LAST_INSERT_ID();

    IF P_REQUEST_ID IS NULL
    THEN
        INSERT INTO STAGES
        (
          REQUEST_ID,
          REQUEST_DATE,
          MSG_ID,
          EXT_ID,
          SYS_ID,
          STAGE_DATE,
          STAGE,
          ITERATION,
          PROCESS_AFTER,
          DEP_ID,
          PARENT_DEP_ID
        )
        VALUES
        (
          V_MSG_ID,
          CURRENT_TIMESTAMP(6),
          V_MSG_ID,
          P_EXT_ID,
          P_SYS_ID,
          CURRENT_TIMESTAMP(6),
          P_STAGE,
          1,
          TIMESTAMPADD(MICROSECOND, P_PROCESS_AFTER_DELAY * 1000, CURRENT_TIMESTAMP(6)),
          P_DEP_ID,
          P_PARENT_DEP_ID
        );

      IF P_PARENT_DEP_ID IS NOT NULL THEN
          SET I = 1;
          L1: LOOP
              SET TMP = REPLACE(SUBSTRING(SUBSTRING_INDEX(REPLACE(P_PARENT_DEP_ID, ';', ','), ',', I), LENGTH(SUBSTRING_INDEX(REPLACE(P_PARENT_DEP_ID, ';', ','), ',', I - 1)) + 1), ',', '');
              IF TMP = '' THEN
                  LEAVE L1;
              END IF;
              INSERT INTO STAGES_DEPS
              (
                    REQUEST_ID,
                    PARENT_REQUEST_ID
              )
              SELECT V_MSG_ID, REQUEST_ID
              FROM STAGES
              WHERE REQUEST_ID < V_MSG_ID AND DEP_ID = TMP;
              SET I = I + 1;
          END LOOP L1;
      END IF;
    ELSE
        SET V_TRANSFER_DATE = CURRENT_TIMESTAMP(6);

        INSERT INTO STAGES_LOG
        (
          REQUEST_ID,
          REQUEST_DATE,
          MSG_ID,
          EXT_ID,
          SYS_ID,
          STAGE_DATE,
          STAGE,
          ITERATION,
          PROCESS_AFTER,
          TRANSFER_DATE,
          DEP_ID,
          PARENT_DEP_ID
        )
        SELECT
          REQUEST_ID,
          REQUEST_DATE,
          MSG_ID,
          EXT_ID,
          SYS_ID,
          STAGE_DATE,
          STAGE,
          ITERATION,
          PROCESS_AFTER,
          V_TRANSFER_DATE,
          DEP_ID,
          PARENT_DEP_ID
        FROM STAGES
        WHERE REQUEST_ID = P_REQUEST_ID;

      IF P_FINAL != 0
      THEN
            INSERT INTO STAGES_LOG_ARCHIVE
            (
              REQUEST_ID,
              REQUEST_DATE,
              MSG_ID,
              EXT_ID,
              SYS_ID,
              STAGE_DATE,
              STAGE,
              ITERATION,
              PROCESS_AFTER,
              DEP_ID,
              PARENT_DEP_ID,
              TRANSFER_DATE,
              FINAL
            )
            SELECT
              REQUEST_ID,
              REQUEST_DATE,
              V_MSG_ID,
              EXT_ID,
              SYS_ID,
              V_TRANSFER_DATE,
              P_STAGE,
              1,
              V_TRANSFER_DATE,
              DEP_ID,
              PARENT_DEP_ID,
              V_TRANSFER_DATE,
              P_FINAL
            FROM STAGES
            WHERE REQUEST_ID = P_REQUEST_ID;

            DELETE FROM STAGES
            WHERE REQUEST_ID = P_REQUEST_ID;
      ELSE
            UPDATE STAGES
            SET
              STAGE_DATE = V_TRANSFER_DATE,
              MSG_ID = V_MSG_ID,
              STAGE = P_STAGE,
              ITERATION = 1,
              PROCESS_AFTER = TIMESTAMPADD(MICROSECOND, P_PROCESS_AFTER_DELAY * 1000, V_TRANSFER_DATE)
            WHERE REQUEST_ID = P_REQUEST_ID;
      END IF;
    END IF;

    RETURN COALESCE(P_REQUEST_ID, V_MSG_ID);
END;
~
CREATE PROCEDURE GET_STAGE_VALUE_3_10(P_STAGE VARCHAR(32), P_SYS_ID VARCHAR(32), P_RECORDS INTEGER)
BEGIN
      SELECT NULL ROW_ID, EXT_ID, SYS_ID, REQUEST_DATE, STAGE_DATE, REQUEST_ID, STAGE_XML, META_INFO, STAGE, ITERATION
      FROM STAGES, STAGES_MSG
      WHERE PROCESS_AFTER <= CURRENT_TIMESTAMP(6) AND
            STAGE LIKE P_STAGE AND
            (SYS_ID = P_SYS_ID OR P_SYS_ID IS NULL) AND
            STAGES.MSG_ID = STAGES_MSG.MSG_ID AND
            NOT EXISTS (SELECT 1 FROM STAGES_DEPS WHERE STAGES_DEPS.REQUEST_ID = STAGES.REQUEST_ID)
      ORDER BY PROCESS_AFTER ASC LIMIT P_RECORDS;
END;
~
CREATE PROCEDURE GET_FINAL_STAGE_VALUE_1_10(P_REQUEST_ID BIGINT)
BEGIN
      SELECT NULL ROW_ID, EXT_ID, SYS_ID, REQUEST_DATE, STAGE_DATE, REQUEST_ID, STAGE_XML, META_INFO, STAGE, ITERATION
      FROM STAGES_LOG_ARCHIVE, STAGES_MSG WHERE STAGES_LOG_ARCHIVE.MSG_ID = STAGES_MSG.MSG_ID AND REQUEST_ID = P_REQUEST_ID AND FINAL = 1;
END;
~
CREATE PROCEDURE COMMIT_STAGE_PROCESSING_8(P_STAGE_DATE DATETIME(6), P_REQUEST_ID BIGINT, P_ERROR_CODE INTEGER, P_ERROR_TEXT LONGTEXT, P_PROCESS_AFTER_DELAY BIGINT, P_ROW_ID VARCHAR(128))
BEGIN
    DECLARE V_ROWCOUNT BIGINT;

    IF P_ERROR_TEXT IS NOT NULL
    THEN
        INSERT INTO STAGES_ERRORS (REQUEST_ID, STAGE, ITERATION, ERROR_DATE, ERROR_CODE, ERROR_TEXT)
        SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP(6), P_ERROR_CODE, P_ERROR_TEXT FROM STAGES WHERE REQUEST_ID = P_REQUEST_ID AND STAGE_DATE = P_STAGE_DATE;

        SET V_ROWCOUNT = ROW_COUNT();

        IF V_ROWCOUNT = 0 THEN
            INSERT INTO STAGES_ERRORS (REQUEST_ID, STAGE, ITERATION, ERROR_DATE, ERROR_CODE, ERROR_TEXT)
            SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP(6), P_ERROR_CODE, P_ERROR_TEXT FROM STAGES_LOG WHERE STAGE_DATE = P_STAGE_DATE AND REQUEST_ID = P_REQUEST_ID
            UNION ALL
            SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP(6), P_ERROR_CODE, P_ERROR_TEXT FROM STAGES_LOG_ARCHIVE WHERE STAGE_DATE = P_STAGE_DATE AND REQUEST_ID = P_REQUEST_ID;
        END IF;
    END IF;

    UPDATE STAGES
    SET
        ITERATION = ITERATION + 1,
        PROCESS_AFTER = TIMESTAMPADD(MICROSECOND, P_PROCESS_AFTER_DELAY * 1000, CURRENT_TIMESTAMP(6))
    WHERE REQUEST_ID = P_REQUEST_ID AND STAGE_DATE = P_STAGE_DATE;
END;
~
CREATE PROCEDURE ROLLBACK_STAGE_PROCESSING_6(P_STAGE_DATE DATETIME(6), P_REQUEST_ID BIGINT, P_ERROR_CODE INTEGER, P_ERROR_TEXT LONGTEXT, P_ROW_ID VARCHAR(128))
BEGIN
    INSERT INTO STAGES_ERRORS (REQUEST_ID, STAGE, ITERATION, ERROR_DATE, ERROR_CODE, ERROR_TEXT)
    SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP(6), P_ERROR_CODE, P_ERROR_TEXT FROM STAGES WHERE REQUEST_ID = P_REQUEST_ID AND STAGE_DATE = P_STAGE_DATE;
END;
~
CREATE FUNCTION MOVE_STAGE_TO_LOG (P_ROWS INTEGER) RETURNS INTEGER
BEGIN
   DECLARE V_COUNT      INTEGER;
   DECLARE V_REQUEST_ID BIGINT;
   DECLARE V_STAGE_DATE DATETIME(6);

   DECLARE CONTINUE HANDLER FOR NOT FOUND
   BEGIN
       SET V_REQUEST_ID = NULL;
   END;

   SET V_COUNT = 0;

   IF (SELECT GET_LOCK('Q_<SYSID>_MOVE_STAGE_TO_LOG',10) = 1)
   THEN
      BEGIN
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
            DO RELEASE_LOCK('Q_<SYSID>_MOVE_STAGE_TO_LOG');
  	    END;

        L1: WHILE V_COUNT < P_ROWS DO
            SELECT REQUEST_ID, STAGE_DATE INTO V_REQUEST_ID, V_STAGE_DATE FROM STAGES_LOG LIMIT 1;
            IF V_REQUEST_ID IS NULL THEN
				LEAVE L1;
			END IF;

            INSERT INTO STAGES_LOG_ARCHIVE
            (
                   REQUEST_ID,
                   REQUEST_DATE,
                   MSG_ID,
                   EXT_ID,
                   SYS_ID,
                   STAGE_DATE,
                   STAGE,
                   ITERATION,
                   PROCESS_AFTER,
                   DEP_ID,
                   PARENT_DEP_ID,
                   TRANSFER_DATE,
                   FINAL
            )
            SELECT REQUEST_ID,
                   REQUEST_DATE,
                   MSG_ID,
                   EXT_ID,
                   SYS_ID,
                   STAGE_DATE,
                   STAGE,
                   ITERATION,
                   PROCESS_AFTER,
                   DEP_ID,
                   PARENT_DEP_ID,
                   TRANSFER_DATE,
                   FINAL
            FROM STAGES_LOG
            WHERE REQUEST_ID = V_REQUEST_ID AND STAGE_DATE = V_STAGE_DATE;

            DELETE FROM STAGES_LOG WHERE REQUEST_ID = V_REQUEST_ID AND STAGE_DATE = V_STAGE_DATE;

            SET V_COUNT = V_COUNT + 1;
         END WHILE L1;

         DO RELEASE_LOCK('Q_<SYSID>_MOVE_STAGE_TO_LOG');
      END;
   END IF;
   RETURN V_COUNT;
END;
~
GRANT ALL ON PROCEDURE GET_STAGE_VALUE_3_10 TO Q_<SYSID>_SVC
~
GRANT ALL ON FUNCTION PUT_STAGE_VALUE_11_1 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE COMMIT_STAGE_PROCESSING_8 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE ROLLBACK_STAGE_PROCESSING_6 TO Q_<SYSID>_SVC
~
GRANT ALL ON PROCEDURE GET_FINAL_STAGE_VALUE_1_10 TO Q_<SYSID>_SVC
~
GRANT ALL ON FUNCTION MOVE_STAGE_TO_LOG TO Q_<SYSID>_SVC
~