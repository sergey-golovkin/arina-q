CREATE USER Q_<SYSID>
IDENTIFIED BY <PASSWORD>
DEFAULT TABLESPACE <STORAGE>
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT LOCK
~
CREATE USER Q_<SYSID>_SVC
IDENTIFIED BY <PASSWORD>
DEFAULT TABLESPACE <STORAGE>
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK
~
GRANT CREATE PROCEDURE TO Q_<SYSID>
~
GRANT CREATE SEQUENCE TO Q_<SYSID>
~
GRANT CREATE SESSION TO Q_<SYSID>
~
GRANT CREATE TABLE TO Q_<SYSID>
~
GRANT CREATE TRIGGER TO Q_<SYSID>
~
GRANT CREATE TYPE TO Q_<SYSID>
~
GRANT CREATE VIEW TO Q_<SYSID>
~
ALTER USER Q_<SYSID> QUOTA UNLIMITED ON <STORAGE>
~
GRANT EXECUTE ON SYS.DBMS_LOCK TO Q_<SYSID>
~
GRANT EXECUTE ON SYS.DBMS_CRYPTO TO Q_<SYSID>
~
CREATE TABLE Q_<SYSID>.EXT_TYPES
(
  SYS_ID      VARCHAR2(32 CHAR)   NOT NULL,
  DATA_TYPE   NUMBER              NOT NULL,
  DESCRIPTION VARCHAR2(1024 CHAR) NOT NULL,
  PRIMARY KEY (SYS_ID, DATA_TYPE)
)
~
CREATE TABLE Q_<SYSID>.TYPES
(
  DATA_TYPE   NUMBER              NOT NULL,
  DESCRIPTION VARCHAR2(1024 CHAR) NOT NULL,
  PRIMARY KEY (DATA_TYPE)
)
~
CREATE TABLE Q_<SYSID>.DATA_IN_MSG
(
  MSG_ID      NUMBER(18)                          NOT NULL,
  DATA_VALUE  CLOB                                NOT NULL,
  META_INFO   CLOB,
  EXPIRE_DATE TIMESTAMP WITH TIME ZONE,
  PRIMARY KEY (MSG_ID)
)
LOB (DATA_VALUE) STORE AS SECUREFILE (DEDUPLICATE COMPRESS HIGH CACHE)
LOB (META_INFO) STORE AS SECUREFILE (DEDUPLICATE COMPRESS HIGH CACHE)
~
CREATE TABLE Q_<SYSID>.DATA_IN
(
  DATA_IN_ID  NUMBER(18)                          NOT NULL,
  DATA_OUT_ID NUMBER(18)                          NOT NULL,
  SYS_ID      VARCHAR2(32 CHAR)                   NOT NULL,
  DATA_TYPE   NUMBER                              NOT NULL,
  RECORD_DATE TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP      NOT NULL,
  SUBQ_ID     NUMBER(18) DEFAULT 0                NOT NULL,
  MSG_ID      NUMBER(18)                          NOT NULL,
  REPLACE_ID  VARCHAR2(100 CHAR),
  PRIMARY KEY (DATA_IN_ID)
)
~
CREATE UNIQUE INDEX Q_<SYSID>.UI_DATA_IN_1 ON Q_<SYSID>.DATA_IN (SUBQ_ID, DATA_IN_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX Q_<SYSID>.UI_DATA_IN_2 ON Q_<SYSID>.DATA_IN (SUBQ_ID, SYS_ID, DATA_IN_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX Q_<SYSID>.UI_DATA_IN_3 ON Q_<SYSID>.DATA_IN (REPLACE_ID)
~
ALTER TABLE Q_<SYSID>.DATA_IN
ADD FOREIGN KEY (DATA_TYPE)
REFERENCES Q_<SYSID>.TYPES (DATA_TYPE)
DEFERRABLE INITIALLY DEFERRED
ENABLE VALIDATE
~
CREATE TABLE Q_<SYSID>.DATA_IN_LOG
(
  DATA_IN_ID  NUMBER(18)                     NOT NULL,
  DATA_OUT_ID NUMBER(18)                     NOT NULL,
  SYS_ID      VARCHAR2(32 CHAR)              NOT NULL,
  DATA_TYPE   NUMBER                         NOT NULL,
  RECORD_DATE TIMESTAMP WITH TIME ZONE                      NOT NULL,
  SUBQ_ID     NUMBER(18)                     NOT NULL,
  MSG_ID      NUMBER(18)                     NOT NULL,
  TRANSFER_DATE TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
  REPLACE_ID  VARCHAR2(100 CHAR)
)
~
CREATE UNIQUE INDEX Q_<SYSID>.UI_DATA_IN_LOG_1 ON Q_<SYSID>.DATA_IN_LOG (TRANSFER_DATE, DATA_IN_ID)
~
CREATE TABLE Q_<SYSID>.DATA_IN_LOG_ARCHIVE
(
  DATA_IN_ID  NUMBER(18)                     NOT NULL,
  DATA_OUT_ID NUMBER(18)                     NOT NULL,
  SYS_ID      VARCHAR2(32 CHAR)              NOT NULL,
  DATA_TYPE   NUMBER                         NOT NULL,
  RECORD_DATE TIMESTAMP WITH TIME ZONE                      NOT NULL,
  SUBQ_ID     NUMBER(18)                     NOT NULL,
  MSG_ID      NUMBER(18)                     NOT NULL,
  TRANSFER_DATE TIMESTAMP WITH TIME ZONE                    NOT NULL,
  REPLACE_ID  VARCHAR2(100 CHAR)
)
~
CREATE INDEX Q_<SYSID>.I_DATA_IN_LOG_ARCHIVE_1 ON Q_<SYSID>.DATA_IN_LOG_ARCHIVE (DATA_IN_ID)
~
CREATE INDEX Q_<SYSID>.I_DATA_IN_LOG_ARCHIVE_2 ON Q_<SYSID>.DATA_IN_LOG_ARCHIVE (DATA_OUT_ID, SYS_ID)
~
CREATE INDEX Q_<SYSID>.I_DATA_IN_LOG_ARCHIVE_3 ON Q_<SYSID>.DATA_IN_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE INDEX Q_<SYSID>.I_DATA_IN_LOG_ARCHIVE_4 ON Q_<SYSID>.DATA_IN_LOG_ARCHIVE (RECORD_DATE)
~
CREATE TABLE Q_<SYSID>.DATA_IN_ERRORS
(
  DATA_IN_ID NUMBER(18) NOT NULL,
  ERROR_DATE TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
  ERROR_CODE NUMBER DEFAULT 0 NOT NULL,
  ERROR_TEXT CLOB
)
LOB (ERROR_TEXT) STORE AS SECUREFILE (DEDUPLICATE COMPRESS HIGH CACHE)
~
CREATE INDEX Q_<SYSID>.I_DATA_IN_ERRORS_1 ON Q_<SYSID>.DATA_IN_ERRORS (ERROR_DATE)
~
CREATE INDEX Q_<SYSID>.I_DATA_IN_ERRORS_2 ON Q_<SYSID>.DATA_IN_ERRORS (DATA_IN_ID)
~
CREATE INDEX Q_<SYSID>.I_DATA_IN_ERRORS_3 ON Q_<SYSID>.DATA_IN_ERRORS (ERROR_CODE)
~
CREATE TABLE Q_<SYSID>.DATA_OUT_MSG
(
  MSG_ID      NUMBER(18)                          NOT NULL,
  DATA_VALUE  CLOB                                NOT NULL,
  META_INFO   CLOB,
  EXPIRE_DATE TIMESTAMP WITH TIME ZONE,
  PRIMARY KEY (MSG_ID)
)
LOB (DATA_VALUE) STORE AS SECUREFILE (DEDUPLICATE COMPRESS HIGH CACHE)
LOB (META_INFO) STORE AS SECUREFILE (DEDUPLICATE COMPRESS HIGH CACHE)
~
CREATE TABLE Q_<SYSID>.DATA_OUT
(
  DATA_OUT_ID NUMBER(18)                          NOT NULL,
  SYS_ID      VARCHAR2(32 CHAR)                   NOT NULL,
  DATA_TYPE   NUMBER                              NOT NULL,
  RECORD_DATE TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP      NOT NULL,
  MSG_ID      NUMBER(18)                          NOT NULL,
  REPLACE_ID  VARCHAR2(100 CHAR),
  TRANS_ID    VARCHAR2(50 CHAR),
  TRANS_SEQ_NO NUMBER(18),
  TRANS_TTL TIMESTAMP WITH TIME ZONE DEFAULT TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY') NOT NULL,
  PRIMARY KEY (DATA_OUT_ID)
)
~
CREATE UNIQUE INDEX Q_<SYSID>.UI_DATA_OUT_1 ON Q_<SYSID>.DATA_OUT (TRANS_TTL, DATA_OUT_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX Q_<SYSID>.UI_DATA_OUT_2 ON Q_<SYSID>.DATA_OUT (TRANS_TTL, SYS_ID, DATA_OUT_ID, DATA_TYPE)
~
CREATE INDEX Q_<SYSID>.UI_DATA_OUT_3 ON Q_<SYSID>.DATA_OUT (TRANS_ID)
~
ALTER TABLE Q_<SYSID>.DATA_OUT
ADD FOREIGN KEY (SYS_ID, DATA_TYPE)
REFERENCES Q_<SYSID>.EXT_TYPES (SYS_ID, DATA_TYPE)
DEFERRABLE INITIALLY DEFERRED
ENABLE VALIDATE
~
CREATE TABLE Q_<SYSID>.DATA_OUT_LOG
(
  DATA_OUT_ID NUMBER(18)                          NOT NULL,
  SYS_ID      VARCHAR2(32 CHAR)                   NOT NULL,
  DATA_TYPE   NUMBER                              NOT NULL,
  RECORD_DATE TIMESTAMP WITH TIME ZONE                           NOT NULL,
  MSG_ID      NUMBER(18)                          NOT NULL,
  TRANSFER_DATE TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP    NOT NULL,
  REPLACE_ID  VARCHAR2(100 CHAR)
)
~
CREATE UNIQUE INDEX Q_<SYSID>.UI_DATA_OUT_LOG_1 ON Q_<SYSID>.DATA_OUT_LOG (TRANSFER_DATE, DATA_OUT_ID)
~
CREATE TABLE Q_<SYSID>.DATA_OUT_LOG_ARCHIVE
(
  DATA_OUT_ID NUMBER(18)                          NOT NULL,
  SYS_ID      VARCHAR2(32 CHAR)                   NOT NULL,
  DATA_TYPE   NUMBER                              NOT NULL,
  RECORD_DATE TIMESTAMP WITH TIME ZONE                           NOT NULL,
  MSG_ID      NUMBER(18)                          NOT NULL,
  TRANSFER_DATE TIMESTAMP WITH TIME ZONE                         NOT NULL,
  REPLACE_ID  VARCHAR2(100 CHAR)
)
~
CREATE INDEX Q_<SYSID>.I_DATA_OUT_LOG_ARCHIVE_1 ON Q_<SYSID>.DATA_OUT_LOG_ARCHIVE (DATA_OUT_ID)
~
CREATE INDEX Q_<SYSID>.I_DATA_OUT_LOG_ARCHIVE_2 ON Q_<SYSID>.DATA_OUT_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE INDEX Q_<SYSID>.I_DATA_OUT_LOG_ARCHIVE_3 ON Q_<SYSID>.DATA_OUT_LOG_ARCHIVE (RECORD_DATE)
~
CREATE TABLE Q_<SYSID>.DATA_OUT_ERRORS
(
  DATA_OUT_ID NUMBER(18) NOT NULL,
  ERROR_DATE TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
  ERROR_CODE NUMBER DEFAULT 0 NOT NULL,
  ERROR_TEXT CLOB
)
LOB (ERROR_TEXT) STORE AS SECUREFILE (DEDUPLICATE COMPRESS HIGH CACHE)
~
CREATE INDEX Q_<SYSID>.I_DATA_OUT_ERRORS_1 ON Q_<SYSID>.DATA_OUT_ERRORS (ERROR_DATE)
~
CREATE INDEX Q_<SYSID>.I_DATA_OUT_ERRORS_2 ON Q_<SYSID>.DATA_OUT_ERRORS (DATA_OUT_ID)
~
CREATE INDEX Q_<SYSID>.I_DATA_OUT_ERRORS_3 ON Q_<SYSID>.DATA_OUT_ERRORS (ERROR_CODE)
~
CREATE SEQUENCE Q_<SYSID>.SQ_DATA_IN
START WITH 1
MAXVALUE 999999999999999999
MINVALUE 1
NOCYCLE
NOCACHE
~
CREATE SEQUENCE Q_<SYSID>.SQ_DATA_OUT
START WITH 1
MAXVALUE 999999999999999999
MINVALUE 1
NOCYCLE
NOCACHE
~
CREATE OR REPLACE FUNCTION Q_<SYSID>.BLOB2CLOB (P_BLOB BLOB) RETURN CLOB
AS
 L_CLOB          CLOB;
 L_DEST_OFFSET   INTEGER := 1;
 L_SOURCE_OFFSET INTEGER := 1;
 L_LANG_CONTEXT  INTEGER := DBMS_LOB.DEFAULT_LANG_CTX;
 L_WARNING       INTEGER := DBMS_LOB.WARN_INCONVERTIBLE_CHAR;
BEGIN
  DBMS_LOB.CREATETEMPORARY(L_CLOB, TRUE, DBMS_LOB.CALL);
  DBMS_LOB.CONVERTTOCLOB
  (
   DEST_LOB    =>L_CLOB,
   SRC_BLOB    =>P_BLOB,
   AMOUNT      =>DBMS_LOB.LOBMAXSIZE,
   DEST_OFFSET =>L_DEST_OFFSET,
   SRC_OFFSET  =>L_SOURCE_OFFSET,
   BLOB_CSID   =>DBMS_LOB.DEFAULT_CSID,
   LANG_CONTEXT=>L_LANG_CONTEXT,
   WARNING     =>L_WARNING
  );
  RETURN L_CLOB;
END;
~
CREATE OR REPLACE FUNCTION Q_<SYSID>.CLOB2BLOB (P_CLOB CLOB) RETURN BLOB
AS
 L_BLOB          BLOB;
 L_DEST_OFFSET   INTEGER := 1;
 L_SOURCE_OFFSET INTEGER := 1;
 L_LANG_CONTEXT  INTEGER := DBMS_LOB.DEFAULT_LANG_CTX;
 L_WARNING       INTEGER := DBMS_LOB.WARN_INCONVERTIBLE_CHAR;
BEGIN
  DBMS_LOB.CREATETEMPORARY(L_BLOB, TRUE, DBMS_LOB.CALL);
  DBMS_LOB.CONVERTTOBLOB
  (
   DEST_LOB    =>L_BLOB,
   SRC_CLOB    =>P_CLOB,
   AMOUNT      =>DBMS_LOB.LOBMAXSIZE,
   DEST_OFFSET =>L_DEST_OFFSET,
   SRC_OFFSET  =>L_SOURCE_OFFSET,
   BLOB_CSID   =>DBMS_LOB.DEFAULT_CSID,
   LANG_CONTEXT=>L_LANG_CONTEXT,
   WARNING     =>L_WARNING
  );
  RETURN L_BLOB;
END;
~
CREATE OR REPLACE TYPE Q_<SYSID>.DATA_ROW_11 AS OBJECT
(
  ROW_ID VARCHAR2(128),
  DATA_IN_ID NUMBER(18),
  DATA_OUT_ID NUMBER(18),
  SYS_ID VARCHAR2(32 CHAR),
  SYS_2_ID VARCHAR2(32 CHAR),
  DATA_TYPE NUMBER,
  DATA_VALUE CLOB,
  META_INFO CLOB,
  RECORD_DATE TIMESTAMP WITH TIME ZONE,
  EXPIRE_DATE TIMESTAMP WITH TIME ZONE,
  REPLACE_ID VARCHAR2(100)
);
~
CREATE OR REPLACE TYPE Q_<SYSID>.DATA_TABLE_11 IS TABLE OF Q_<SYSID>.DATA_ROW_11
~
CREATE OR REPLACE FUNCTION Q_<SYSID>.GET_IN_VALUE_3_11(P_SYS_ID VARCHAR2 DEFAULT NULL, P_DATA_TYPES VARCHAR2 DEFAULT NULL, P_SUBQ_ID NUMBER DEFAULT 0) RETURN DATA_TABLE_11
AS
   V_TABLE       DATA_TABLE_11 := DATA_TABLE_11 ();
   V_ROW_ID      VARCHAR2(128);
   V_DATA_IN_ID  NUMBER(18);
   V_DATA_OUT_ID NUMBER(18);
   V_MSG_ID      NUMBER(18);
   V_SYS_ID      VARCHAR2(32 CHAR);
   V_DATA_TYPE   NUMBER;
   V_DATA_VALUE  CLOB;
   V_META_INFO   CLOB;
   V_RECORD_DATE TIMESTAMP WITH TIME ZONE;
   V_EXPIRE_DATE TIMESTAMP WITH TIME ZONE;
   V_REPLACE_ID    VARCHAR2(100 CHAR);
   V_SQL         VARCHAR2(4000);
   V_CONST_SQL   VARCHAR2(2000);
BEGIN
   V_CONST_SQL := ' ROWIDTOCHAR(ROWID) ROW_ID, DATA_IN_ID, DATA_OUT_ID, SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID FROM DATA_IN WHERE ROWNUM < 2 AND SUBQ_ID = ' || NVL(P_SUBQ_ID, 0);
   
   IF P_DATA_TYPES IS NOT NULL THEN
      V_CONST_SQL := V_CONST_SQL || ' AND DATA_TYPE IN (' || REPLACE(P_DATA_TYPES, ';', ',') || ')';
   END IF;

   IF P_SYS_ID IS NULL THEN
      V_SQL := 'SELECT /*+INDEX_ASC(DATA_IN, UI_DATA_IN_1)*/ ' || V_CONST_SQL;
   ELSIF P_SYS_ID IS NOT NULL THEN 
      V_SQL := 'SELECT /*+INDEX_ASC(DATA_IN, UI_DATA_IN_2)*/ ' || V_CONST_SQL || ' AND SYS_ID IN (''' || REPLACE(REPLACE(REPLACE(P_SYS_ID, ';', ','), ' ', ''), ',', ''',''')||''')';
   END IF;

   EXECUTE IMMEDIATE V_SQL INTO V_ROW_ID, V_DATA_IN_ID, V_DATA_OUT_ID, V_SYS_ID, V_DATA_TYPE, V_RECORD_DATE, V_MSG_ID, V_REPLACE_ID;

   SELECT DATA_VALUE, META_INFO, EXPIRE_DATE INTO V_DATA_VALUE, V_META_INFO, V_EXPIRE_DATE FROM DATA_IN_MSG WHERE MSG_ID = V_MSG_ID;

   V_TABLE.EXTEND;
   V_TABLE (V_TABLE.LAST) :=
      DATA_ROW_11 (
                V_ROW_ID,
                V_DATA_IN_ID,
                V_DATA_OUT_ID,
                V_SYS_ID,
                '<SYSID>',
                V_DATA_TYPE,
                V_DATA_VALUE,
                V_META_INFO,
                V_RECORD_DATE,
                V_EXPIRE_DATE,
                V_REPLACE_ID
                );
   RETURN V_TABLE;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN V_TABLE;
END;
~
CREATE OR REPLACE FUNCTION Q_<SYSID>.GET_OUT_VALUE_2_11(P_SYS_ID VARCHAR2 DEFAULT NULL, P_DATA_TYPES VARCHAR2 DEFAULT NULL) RETURN DATA_TABLE_11
AS
   V_TABLE       DATA_TABLE_11 := DATA_TABLE_11();
   V_ROW_ID      VARCHAR2(128);
   V_DATA_OUT_ID NUMBER(18);
   V_MSG_ID      NUMBER(18);
   V_SYS_ID      VARCHAR2(32 CHAR);
   V_DATA_TYPE   NUMBER;
   V_DATA_VALUE  CLOB;
   V_META_INFO   CLOB;
   V_RECORD_DATE TIMESTAMP WITH TIME ZONE;
   V_EXPIRE_DATE TIMESTAMP WITH TIME ZONE;
   V_REPLACE_ID  VARCHAR2(100 CHAR);
   V_SQL         VARCHAR2(4000);
   V_CONST_SQL   VARCHAR2(2000);
BEGIN
   V_CONST_SQL := ' ROWIDTOCHAR(ROWID) ROW_ID, DATA_OUT_ID, SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID FROM DATA_OUT WHERE ROWNUM < 2 AND TRANS_TTL = TO_TIMESTAMP(''01/01/3000'', ''DD/MM/YYYY'')';

   IF P_DATA_TYPES IS NOT NULL THEN
      V_CONST_SQL := V_CONST_SQL || ' AND DATA_TYPE IN (' || REPLACE(P_DATA_TYPES, ';', ',') || ')';
   END IF;

   IF P_SYS_ID IS NULL
   THEN
      V_SQL := 'SELECT /*+INDEX_ASC(DATA_OUT, UI_DATA_OUT_1)*/ ' || V_CONST_SQL;
   ELSE
      V_SQL := 'SELECT /*+INDEX_ASC(DATA_OUT, UI_DATA_OUT_2)*/ ' || V_CONST_SQL || ' AND SYS_ID IN (''' || REPLACE(REPLACE(REPLACE(P_SYS_ID, ';', ','), ' ', ''), ',', ''',''')||''')';
   END IF;

   EXECUTE IMMEDIATE V_SQL INTO V_ROW_ID, V_DATA_OUT_ID, V_SYS_ID, V_DATA_TYPE, V_RECORD_DATE, V_MSG_ID, V_REPLACE_ID;

   SELECT DATA_VALUE, META_INFO, EXPIRE_DATE INTO V_DATA_VALUE, V_META_INFO, V_EXPIRE_DATE FROM DATA_OUT_MSG WHERE MSG_ID = V_MSG_ID;

   V_TABLE.EXTEND;
   V_TABLE(V_TABLE.LAST) :=
       DATA_ROW_11 (
                 V_ROW_ID,
                 NULL,
                 V_DATA_OUT_ID,
                 '<SYSID>',
                 V_SYS_ID,
                 V_DATA_TYPE,
                 V_DATA_VALUE,
                 V_META_INFO,
                 V_RECORD_DATE,
                 V_EXPIRE_DATE,
                 V_REPLACE_ID
                 );
   RETURN V_TABLE;
   EXCEPTION
   WHEN OTHERS
   THEN
      RETURN V_TABLE;
END;
~
CREATE OR REPLACE PROCEDURE Q_<SYSID>.COMMIT_IN_PROCESSING_4(P_DATA_IN_ID NUMBER, P_RECORD_DATE TIMESTAMP WITH TIME ZONE, P_ERROR_TEXT CLOB DEFAULT NULL, P_ROW_ID VARCHAR2 DEFAULT NULL)
AS
   V_TRANSFER_DATE TIMESTAMP WITH TIME ZONE;
BEGIN

  V_TRANSFER_DATE := SYSTIMESTAMP;

  IF P_ERROR_TEXT IS NOT NULL
  THEN
    INSERT INTO DATA_IN_ERRORS (DATA_IN_ID, ERROR_DATE, ERROR_TEXT) VALUES (P_DATA_IN_ID, V_TRANSFER_DATE, P_ERROR_TEXT);
  END IF;

  IF P_ROW_ID IS NOT NULL THEN
    INSERT INTO DATA_IN_LOG (DATA_IN_ID,
                             DATA_OUT_ID,
                             SYS_ID,
                             DATA_TYPE,
                             RECORD_DATE,
                             SUBQ_ID,
                             MSG_ID,
                             TRANSFER_DATE,
                             REPLACE_ID)
    SELECT
        DATA_IN_ID,
        DATA_OUT_ID,
        SYS_ID,
        DATA_TYPE,
        RECORD_DATE,
        SUBQ_ID,
        MSG_ID,
        V_TRANSFER_DATE,
        REPLACE_ID
    FROM DATA_IN
    WHERE ROWID = CHARTOROWID(P_ROW_ID) AND RECORD_DATE = P_RECORD_DATE;

    DELETE FROM DATA_IN WHERE ROWID = CHARTOROWID(P_ROW_ID) AND RECORD_DATE = P_RECORD_DATE;
  ELSE
    INSERT INTO DATA_IN_LOG (DATA_IN_ID,
                             DATA_OUT_ID,
                             SYS_ID,
                             DATA_TYPE,
                             RECORD_DATE,
                             SUBQ_ID,
                             MSG_ID,
                             TRANSFER_DATE,
                             REPLACE_ID)
    SELECT
        DATA_IN_ID,
        DATA_OUT_ID,
        SYS_ID,
        DATA_TYPE,
        RECORD_DATE,
        SUBQ_ID,
        MSG_ID,
        V_TRANSFER_DATE,
        REPLACE_ID
    FROM DATA_IN
    WHERE DATA_IN_ID = P_DATA_IN_ID AND RECORD_DATE = P_RECORD_DATE;

    DELETE FROM DATA_IN WHERE DATA_IN_ID = P_DATA_IN_ID AND RECORD_DATE = P_RECORD_DATE;
  END IF;
END;
~
CREATE OR REPLACE PROCEDURE Q_<SYSID>.ROLLBACK_IN_PROCESSING_4(P_DATA_IN_ID NUMBER, P_ERROR_CODE NUMBER, P_ERROR_TEXT CLOB, P_ROW_ID VARCHAR2 DEFAULT NULL)
AS
BEGIN
  INSERT INTO DATA_IN_ERRORS (DATA_IN_ID, ERROR_CODE, ERROR_TEXT) VALUES (P_DATA_IN_ID, P_ERROR_CODE, P_ERROR_TEXT);
END;
~
CREATE OR REPLACE PROCEDURE Q_<SYSID>.COMMIT_OUT_PROCESSING_3(P_DATA_OUT_ID NUMBER, P_ERROR_TEXT CLOB DEFAULT NULL, P_ROW_ID VARCHAR2 DEFAULT NULL)
AS
   V_TRANSFER_DATE TIMESTAMP WITH TIME ZONE;
BEGIN

  V_TRANSFER_DATE := SYSTIMESTAMP;

  IF P_ERROR_TEXT IS NOT NULL
  THEN
    INSERT INTO DATA_OUT_ERRORS (DATA_OUT_ID, ERROR_DATE, ERROR_TEXT) VALUES (P_DATA_OUT_ID, V_TRANSFER_DATE, P_ERROR_TEXT);
  END IF;

  IF P_ROW_ID IS NOT NULL THEN
    INSERT INTO DATA_OUT_LOG (DATA_OUT_ID,
                              SYS_ID,
                              DATA_TYPE,
                              RECORD_DATE,
                              MSG_ID,
                              TRANSFER_DATE,
                              REPLACE_ID)
    SELECT
      DATA_OUT_ID,
      SYS_ID,
      DATA_TYPE,
      RECORD_DATE,
      MSG_ID,
      V_TRANSFER_DATE,
      REPLACE_ID
    FROM DATA_OUT
    WHERE ROWID = CHARTOROWID(P_ROW_ID);

    DELETE FROM DATA_OUT WHERE ROWID = CHARTOROWID(P_ROW_ID);
  ELSE
    INSERT INTO DATA_OUT_LOG (DATA_OUT_ID,
                              SYS_ID,
                              DATA_TYPE,
                              RECORD_DATE,
                              MSG_ID,
                              TRANSFER_DATE,
                              REPLACE_ID)
    SELECT
      DATA_OUT_ID,
      SYS_ID,
      DATA_TYPE,
      RECORD_DATE,
      MSG_ID,
      V_TRANSFER_DATE,
      REPLACE_ID
    FROM DATA_OUT
    WHERE DATA_OUT_ID = P_DATA_OUT_ID;

    DELETE FROM DATA_OUT WHERE DATA_OUT_ID = P_DATA_OUT_ID;
  END IF;
END;
~
CREATE OR REPLACE PROCEDURE Q_<SYSID>.ROLLBACK_OUT_PROCESSING_4(P_DATA_OUT_ID NUMBER, P_ERROR_CODE NUMBER, P_ERROR_TEXT CLOB, P_ROW_ID VARCHAR2 DEFAULT NULL)
AS
BEGIN
  INSERT INTO DATA_OUT_ERRORS (DATA_OUT_ID, ERROR_CODE, ERROR_TEXT) VALUES (P_DATA_OUT_ID, P_ERROR_CODE, P_ERROR_TEXT);
END;
~
CREATE OR REPLACE PROCEDURE Q_<SYSID>.CHANGE_IN_SUBQ_3(P_SUBQ_ID NUMBER, P_DATA_IN_ID NUMBER, P_ROW_ID VARCHAR2 DEFAULT NULL)
AS
BEGIN
  IF P_ROW_ID IS NOT NULL THEN
    UPDATE DATA_IN SET SUBQ_ID = P_SUBQ_ID WHERE ROWID = CHARTOROWID(P_ROW_ID);
  ELSE
    UPDATE DATA_IN SET SUBQ_ID = P_SUBQ_ID WHERE DATA_IN_ID = P_DATA_IN_ID;
  END IF;
END;
~
CREATE OR REPLACE FUNCTION Q_<SYSID>.PUT_OUT_VALUE_9_1(P_SYS_ID VARCHAR2, P_DATA_TYPE NUMBER, P_DATA_VALUE CLOB, P_META_INFO CLOB DEFAULT NULL, P_EXPIRE_DATE TIMESTAMP WITH TIME ZONE DEFAULT NULL, P_REPLACE_ID VARCHAR2 DEFAULT NULL, P_TRANS_ID VARCHAR2 DEFAULT NULL, P_TRANS_SEQ_NO NUMBER DEFAULT NULL, P_TRANS_TTL_SECONDS NUMBER DEFAULT 3600) RETURN NUMBER
AS
  V_MSG_ID NUMBER(18);
BEGIN
  V_MSG_ID := SQ_DATA_OUT.NEXTVAL;
  INSERT INTO DATA_OUT_MSG(MSG_ID, DATA_VALUE, META_INFO, EXPIRE_DATE) VALUES (V_MSG_ID, P_DATA_VALUE, P_META_INFO, P_EXPIRE_DATE);

  IF P_SYS_ID IS NULL OR P_SYS_ID = 'ANY$Y$TEM' THEN
      INSERT INTO DATA_OUT(DATA_OUT_ID, SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) SELECT SQ_DATA_OUT.NEXTVAL, SYS_ID, P_DATA_TYPE, SYSTIMESTAMP, V_MSG_ID, P_REPLACE_ID, P_TRANS_ID, NVL(P_TRANS_SEQ_NO, V_MSG_ID), CASE WHEN P_TRANS_ID IS NULL THEN TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY') ELSE (SELECT NVL(MIN(TRANS_TTL), SYSTIMESTAMP + NUMTODSINTERVAL(NVL(P_TRANS_TTL_SECONDS, 3600), 'second')) FROM DATA_OUT WHERE TRANS_ID = P_TRANS_ID AND TRANS_TTL < TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY')) END FROM EXT_TYPES WHERE DATA_TYPE = P_DATA_TYPE;
  ELSE
      INSERT INTO DATA_OUT(DATA_OUT_ID, SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) VALUES (V_MSG_ID, P_SYS_ID, P_DATA_TYPE, SYSTIMESTAMP, V_MSG_ID, P_REPLACE_ID, P_TRANS_ID, NVL(P_TRANS_SEQ_NO, V_MSG_ID), CASE WHEN P_TRANS_ID IS NULL THEN TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY') ELSE (SELECT NVL(MIN(TRANS_TTL), SYSTIMESTAMP + NUMTODSINTERVAL(NVL(P_TRANS_TTL_SECONDS, 3600), 'second')) FROM DATA_OUT WHERE TRANS_ID = P_TRANS_ID AND TRANS_TTL < TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY')) END);
  END IF;

  RETURN V_MSG_ID;
END;
~
CREATE OR REPLACE FUNCTION Q_<SYSID>.PUT_IN_VALUE_9_1(P_SYS_ID VARCHAR2, P_DATA_OUT_ID NUMBER, P_DATA_TYPE NUMBER, P_DATA_VALUE CLOB, P_RECORD_DATE TIMESTAMP WITH TIME ZONE DEFAULT NULL, P_SUBQ_ID NUMBER DEFAULT 0, P_META_INFO CLOB DEFAULT NULL, P_EXPIRE_DATE TIMESTAMP WITH TIME ZONE DEFAULT NULL, P_REPLACE_ID VARCHAR2 DEFAULT NULL) RETURN NUMBER
AS
  V_MSG_ID NUMBER(18);
  V_ROW_ID VARCHAR2(128);
  V_DATA_IN_ID NUMBER (18);
  V_RECORD_DATE TIMESTAMP WITH TIME ZONE;
  V_SUBQ_ID NUMBER(18);
BEGIN
  BEGIN
    V_MSG_ID := SQ_DATA_IN.NEXTVAL;
    INSERT INTO DATA_IN_MSG(MSG_ID, DATA_VALUE, META_INFO, EXPIRE_DATE) VALUES (V_MSG_ID, P_DATA_VALUE, P_META_INFO, P_EXPIRE_DATE);
    INSERT INTO DATA_IN(DATA_IN_ID, SYS_ID, DATA_OUT_ID, DATA_TYPE, RECORD_DATE, SUBQ_ID, MSG_ID, REPLACE_ID) VALUES (V_MSG_ID, P_SYS_ID, P_DATA_OUT_ID, P_DATA_TYPE, NVL(P_RECORD_DATE, SYSTIMESTAMP), NVL(P_SUBQ_ID, 0), V_MSG_ID, P_REPLACE_ID);
  EXCEPTION
     WHEN DUP_VAL_ON_INDEX
     THEN
     BEGIN
       SELECT ROWIDTOCHAR(ROWID), DATA_IN_ID, RECORD_DATE, SUBQ_ID INTO V_ROW_ID, V_DATA_IN_ID, V_RECORD_DATE, V_SUBQ_ID FROM DATA_IN WHERE REPLACE_ID = P_REPLACE_ID;
       COMMIT_IN_PROCESSING_4(V_DATA_IN_ID, V_RECORD_DATE, 'Message replaced!', V_ROW_ID);
       INSERT INTO DATA_IN(DATA_IN_ID, SYS_ID, DATA_OUT_ID, DATA_TYPE, RECORD_DATE, SUBQ_ID, MSG_ID, REPLACE_ID) VALUES (V_DATA_IN_ID, P_SYS_ID, P_DATA_OUT_ID, P_DATA_TYPE, NVL(P_RECORD_DATE, SYSTIMESTAMP), NVL(V_SUBQ_ID, 0), V_MSG_ID, P_REPLACE_ID);
     END;
  END;

  RETURN V_MSG_ID;
END;
~
CREATE OR REPLACE PROCEDURE Q_<SYSID>.SEND_OUT_TRANS_1(P_TRANS_ID VARCHAR2)
AS
BEGIN
--    FOR I IN (SELECT ROWID FROM DATA_OUT WHERE TRANS_ID = P_TRANS_ID AND TRANS_TTL < TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY') ORDER BY TRANS_SEQ_NO) LOOP
--        UPDATE DATA_OUT SET DATA_OUT_ID = SQ_DATA_OUT.NEXTVAL, TRANS_TTL = TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY') WHERE ROWID = I.ROWID;
--    END LOOP;
    INSERT INTO DATA_OUT(DATA_OUT_ID, SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) SELECT SQ_DATA_OUT.NEXTVAL, SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY') FROM (SELECT SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO FROM DATA_OUT WHERE TRANS_ID = P_TRANS_ID AND TRANS_TTL < TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY') ORDER BY TRANS_SEQ_NO);
    DELETE FROM DATA_OUT WHERE TRANS_ID = P_TRANS_ID AND TRANS_TTL < TO_TIMESTAMP('01/01/3000', 'DD/MM/YYYY');
END;
~
CREATE OR REPLACE FUNCTION Q_<SYSID>.MOVE_DATA_IN_TO_LOG (P_ROWS NUMBER DEFAULT 1) RETURN NUMBER
AS
   V_LOCKHANDLE VARCHAR2 (200);
   V_RESULT     NUMBER;
   V_COUNT      NUMBER;
   V_ROWID      ROWID;
BEGIN
   V_COUNT := 0;
   DBMS_LOCK.ALLOCATE_UNIQUE ('Q_<SYSID>_MOVE_DATA_IN_TO_LOG', V_LOCKHANDLE);

   IF DBMS_LOCK.REQUEST (V_LOCKHANDLE, DBMS_LOCK.X_MODE, 0, FALSE) = 0
   THEN
      BEGIN
         BEGIN
            FOR I IN 1 .. P_ROWS
            LOOP
               SELECT ROWID INTO V_ROWID FROM DATA_IN_LOG WHERE ROWNUM < 2;

               INSERT INTO DATA_IN_LOG_ARCHIVE
               (
                      DATA_IN_ID,
                      DATA_OUT_ID,
                      SYS_ID,
                      DATA_TYPE,
                      RECORD_DATE,
                      TRANSFER_DATE,
                      SUBQ_ID,
                      MSG_ID,
                      REPLACE_ID
               )
               SELECT DATA_IN_ID,
                      DATA_OUT_ID,
                      SYS_ID,
                      DATA_TYPE,
                      RECORD_DATE,
                      TRANSFER_DATE,
                      SUBQ_ID,
                      MSG_ID,
                      REPLACE_ID
               FROM DATA_IN_LOG
               WHERE ROWID = V_ROWID;

               DELETE FROM DATA_IN_LOG WHERE ROWID = V_ROWID;

               V_COUNT := V_COUNT + 1; 
            END LOOP;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         V_RESULT := DBMS_LOCK.RELEASE (V_LOCKHANDLE);
      END;
   END IF;
   RETURN V_COUNT;
END;
~
CREATE OR REPLACE FUNCTION Q_<SYSID>.MOVE_DATA_OUT_TO_LOG (P_ROWS NUMBER DEFAULT 1) RETURN NUMBER
AS
   V_LOCKHANDLE VARCHAR2 (200);
   V_RESULT     NUMBER;
   V_COUNT      NUMBER;
   V_ROWID      ROWID;
   V_DATA_OUT_ID NUMBER(18);
   V_TRANS_ID    VARCHAR2(50 CHAR);
BEGIN
   V_COUNT := 0;
   DBMS_LOCK.ALLOCATE_UNIQUE ('Q_<SYSID>_MOVE_DATA_OUT_TO_LOG', V_LOCKHANDLE);

   IF DBMS_LOCK.REQUEST (V_LOCKHANDLE, DBMS_LOCK.X_MODE, 0, FALSE) = 0
   THEN
      BEGIN
         BEGIN
            FOR I IN 1 .. P_ROWS
            LOOP
               SELECT ROWID INTO V_ROWID FROM DATA_OUT_LOG WHERE ROWNUM < 2;

               INSERT INTO DATA_OUT_LOG_ARCHIVE
               (
                      DATA_OUT_ID,
                      SYS_ID,
                      DATA_TYPE,
                      RECORD_DATE,
                      TRANSFER_DATE,
                      MSG_ID,
                      REPLACE_ID
               )
               SELECT DATA_OUT_ID,
                      SYS_ID,
                      DATA_TYPE,
                      RECORD_DATE,
                      TRANSFER_DATE,
                      MSG_ID,
                      REPLACE_ID
               FROM DATA_OUT_LOG
               WHERE ROWID = V_ROWID;

               DELETE FROM DATA_OUT_LOG WHERE ROWID = V_ROWID;

               V_COUNT := V_COUNT + 1;
            END LOOP;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         BEGIN
            FOR I IN 1 .. P_ROWS
            LOOP
               SELECT ROWID, DATA_OUT_ID, TRANS_ID INTO V_ROWID, V_DATA_OUT_ID, V_TRANS_ID FROM DATA_OUT WHERE ROWNUM < 2 AND TRANS_TTL < SYSTIMESTAMP;
               COMMIT_OUT_PROCESSING_3(V_DATA_OUT_ID, 'Trans lost! TransId = {' || V_TRANS_ID || '}' , V_ROWID);

               V_COUNT := V_COUNT + 1;
            END LOOP;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         V_RESULT := DBMS_LOCK.RELEASE (V_LOCKHANDLE);
      END;
   END IF;
   RETURN V_COUNT;
END;
~
CREATE ROLE Q_<SYSID>_CLI_ROLE NOT IDENTIFIED
~
GRANT EXECUTE ON Q_<SYSID>.GET_IN_VALUE_3_11 TO Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.PUT_OUT_VALUE_9_1 TO Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.SEND_OUT_TRANS_1 TO Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.COMMIT_IN_PROCESSING_4 TO Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.ROLLBACK_IN_PROCESSING_4 TO Q_<SYSID>_CLI_ROLE
~
CREATE ROLE Q_<SYSID>_SVC_ROLE NOT IDENTIFIED
~
GRANT EXECUTE ON Q_<SYSID>.GET_IN_VALUE_3_11 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.GET_OUT_VALUE_2_11 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.PUT_OUT_VALUE_9_1 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.PUT_IN_VALUE_9_1 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.SEND_OUT_TRANS_1 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.COMMIT_IN_PROCESSING_4 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.COMMIT_OUT_PROCESSING_3 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.ROLLBACK_IN_PROCESSING_4 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.ROLLBACK_OUT_PROCESSING_4 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.CHANGE_IN_SUBQ_3 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.MOVE_DATA_IN_TO_LOG TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.MOVE_DATA_OUT_TO_LOG TO Q_<SYSID>_SVC_ROLE
~
GRANT CREATE SESSION TO Q_<SYSID>_SVC
~
GRANT Q_<SYSID>_SVC_ROLE TO Q_<SYSID>_SVC
~
ALTER USER Q_<SYSID>_SVC DEFAULT ROLE ALL
~
CREATE OR REPLACE SYNONYM Q_<SYSID>.GET_VALUE FOR Q_<SYSID>.GET_IN_VALUE_3_11
~
CREATE OR REPLACE SYNONYM Q_<SYSID>.PUT_VALUE FOR Q_<SYSID>.PUT_OUT_VALUE_9_1
~
CREATE OR REPLACE SYNONYM Q_<SYSID>.SEND_OUT_TRANS FOR Q_<SYSID>.SEND_OUT_TRANS_1
~
CREATE OR REPLACE SYNONYM Q_<SYSID>.COMMIT_PROCESSING FOR Q_<SYSID>.COMMIT_IN_PROCESSING_4
~
CREATE OR REPLACE SYNONYM Q_<SYSID>.ROLLBACK_PROCESSING FOR Q_<SYSID>.ROLLBACK_IN_PROCESSING_4
~
