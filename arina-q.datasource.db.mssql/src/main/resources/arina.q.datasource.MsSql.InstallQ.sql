CREATE SCHEMA Q_<SYSID>
~
CREATE TABLE Q_<SYSID>.EXT_TYPES
(
  SYS_ID    NVARCHAR(32)  NOT NULL,
  DATA_TYPE INTEGER NOT NULL,
  DESCRIPTION NVARCHAR(1024)  NOT NULL,
  PRIMARY KEY (SYS_ID, DATA_TYPE)
)
~
CREATE TABLE Q_<SYSID>.TYPES
(
  DATA_TYPE INTEGER NOT NULL,
  DESCRIPTION NVARCHAR(1024)  NOT NULL,
  PRIMARY KEY (DATA_TYPE)
)
~
CREATE TABLE Q_<SYSID>.DATA_IN_MSG
(
  MSG_ID      BIGINT IDENTITY (1, 1) NOT NULL,
  DATA_VALUE  NVARCHAR(MAX)          NOT NULL,
  META_INFO   NVARCHAR(MAX),
  EXPIRE_DATE DATETIME2,
  PRIMARY KEY (MSG_ID)
)
~
CREATE TABLE Q_<SYSID>.DATA_IN
(
  DATA_IN_ID  BIGINT           NOT NULL,
  DATA_OUT_ID BIGINT           NOT NULL,
  SYS_ID      NVARCHAR(32)     NOT NULL,
  DATA_TYPE   INTEGER          NOT NULL,
  RECORD_DATE DATETIME2         NOT NULL,
  SUBQ_ID     BIGINT DEFAULT 0 NOT NULL,
  MSG_ID      BIGINT           NOT NULL,
  REPLACE_ID  NVARCHAR(100),
  PRIMARY KEY (DATA_IN_ID)
)
~
CREATE UNIQUE INDEX UI_DATA_IN_1 ON Q_<SYSID>.DATA_IN (SUBQ_ID, DATA_IN_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX UI_DATA_IN_2 ON Q_<SYSID>.DATA_IN (SUBQ_ID, SYS_ID, DATA_IN_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX UI_DATA_IN_3 ON Q_<SYSID>.DATA_IN (REPLACE_ID) WHERE REPLACE_ID IS NOT NULL
~
ALTER TABLE Q_<SYSID>.DATA_IN
ADD FOREIGN KEY (DATA_TYPE)
REFERENCES Q_<SYSID>.TYPES (DATA_TYPE)
~
CREATE TABLE Q_<SYSID>.DATA_IN_LOG
(
  DATA_IN_ID    BIGINT       NOT NULL,
  DATA_OUT_ID   BIGINT       NOT NULL,
  SYS_ID        NVARCHAR(32) NOT NULL,
  DATA_TYPE     INTEGER      NOT NULL,
  RECORD_DATE   DATETIME2     NOT NULL,
  SUBQ_ID       BIGINT       NOT NULL,
  MSG_ID        BIGINT       NOT NULL,
  TRANSFER_DATE DATETIME2 DEFAULT CURRENT_TIMESTAMP NOT NULL,
  REPLACE_ID    NVARCHAR(100)
)
~
CREATE UNIQUE INDEX UI_DATA_IN_LOG_1 ON Q_<SYSID>.DATA_IN_LOG (TRANSFER_DATE, DATA_IN_ID)
~
CREATE TABLE Q_<SYSID>.DATA_IN_LOG_ARCHIVE
(
  DATA_IN_ID    BIGINT       NOT NULL,
  DATA_OUT_ID   BIGINT       NOT NULL,
  SYS_ID        NVARCHAR(32) NOT NULL,
  DATA_TYPE     INTEGER      NOT NULL,
  RECORD_DATE   DATETIME2     NOT NULL,
  SUBQ_ID       BIGINT       NOT NULL,
  MSG_ID        BIGINT       NOT NULL,
  TRANSFER_DATE DATETIME2     NOT NULL,
  REPLACE_ID    NVARCHAR(100)
)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_1 ON Q_<SYSID>.DATA_IN_LOG_ARCHIVE (DATA_IN_ID)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_2 ON Q_<SYSID>.DATA_IN_LOG_ARCHIVE (DATA_OUT_ID, SYS_ID)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_3 ON Q_<SYSID>.DATA_IN_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_4 ON Q_<SYSID>.DATA_IN_LOG_ARCHIVE (RECORD_DATE)
~
CREATE TABLE Q_<SYSID>.DATA_IN_ERRORS
(
  DATA_IN_ID BIGINT NOT NULL,
  ERROR_DATE DATETIME2 DEFAULT CURRENT_TIMESTAMP NOT NULL,
  ERROR_CODE INTEGER DEFAULT 0 NOT NULL,
  ERROR_TEXT NVARCHAR(MAX)
)
~
CREATE INDEX I_DATA_IN_ERRORS_1 ON Q_<SYSID>.DATA_IN_ERRORS (ERROR_DATE)
~
CREATE INDEX I_DATA_IN_ERRORS_2 ON Q_<SYSID>.DATA_IN_ERRORS (DATA_IN_ID)
~
CREATE INDEX I_DATA_IN_ERRORS_3 ON Q_<SYSID>.DATA_IN_ERRORS (ERROR_CODE)
~
CREATE TABLE Q_<SYSID>.DATA_OUT_MSG
(
  MSG_ID      BIGINT IDENTITY (1, 1) NOT NULL,
  DATA_VALUE  NVARCHAR(MAX)          NOT NULL,
  META_INFO   NVARCHAR(MAX),
  EXPIRE_DATE DATETIME2,
  PRIMARY KEY (MSG_ID)
)
~
CREATE TABLE Q_<SYSID>.DATA_OUT
(
  DATA_OUT_ID BIGINT IDENTITY (1, 1)             NOT NULL,
  SYS_ID      NVARCHAR(32)                       NOT NULL,
  DATA_TYPE   INTEGER                            NOT NULL,
  RECORD_DATE DATETIME2 DEFAULT CURRENT_TIMESTAMP NOT NULL,
  MSG_ID      BIGINT                             NOT NULL,
  REPLACE_ID  NVARCHAR(100),
  TRANS_ID    NVARCHAR(50),
  TRANS_SEQ_NO BIGINT,
  TRANS_TTL   DATETIME2 DEFAULT '3000-01-01T00:00:00' NOT NULL,
  PRIMARY KEY (DATA_OUT_ID)
)
~
CREATE UNIQUE INDEX UI_DATA_OUT_1 ON Q_<SYSID>.DATA_OUT (TRANS_TTL, DATA_OUT_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX UI_DATA_OUT_2 ON Q_<SYSID>.DATA_OUT (TRANS_TTL, SYS_ID, DATA_OUT_ID, DATA_TYPE)
~
CREATE INDEX UI_DATA_OUT_3 ON Q_<SYSID>.DATA_OUT (TRANS_ID)
~
ALTER TABLE Q_<SYSID>.DATA_OUT
ADD FOREIGN KEY (SYS_ID, DATA_TYPE)
REFERENCES Q_<SYSID>.EXT_TYPES (SYS_ID, DATA_TYPE)
~
CREATE TABLE Q_<SYSID>.DATA_OUT_LOG
(
  DATA_OUT_ID   BIGINT                             NOT NULL,
  SYS_ID        NVARCHAR(32)                       NOT NULL,
  DATA_TYPE     INTEGER                            NOT NULL,
  RECORD_DATE   DATETIME2                           NOT NULL,
  MSG_ID        BIGINT                             NOT NULL,
  TRANSFER_DATE DATETIME2 DEFAULT CURRENT_TIMESTAMP NOT NULL,
  REPLACE_ID    NVARCHAR(100)
)
~
CREATE UNIQUE INDEX UI_DATA_OUT_LOG_1 ON Q_<SYSID>.DATA_OUT_LOG (TRANSFER_DATE, DATA_OUT_ID)
~
CREATE TABLE Q_<SYSID>.DATA_OUT_LOG_ARCHIVE
(
  DATA_OUT_ID   BIGINT       NOT NULL,
  SYS_ID        NVARCHAR(32) NOT NULL,
  DATA_TYPE     INTEGER      NOT NULL,
  RECORD_DATE   DATETIME2     NOT NULL,
  MSG_ID        BIGINT       NOT NULL,
  TRANSFER_DATE DATETIME2     NOT NULL,
  REPLACE_ID    NVARCHAR(100)
)
~
CREATE INDEX I_DATA_OUT_LOG_ARCHIVE_1 ON Q_<SYSID>.DATA_OUT_LOG_ARCHIVE (DATA_OUT_ID)
~
CREATE INDEX I_DATA_OUT_LOG_ARCHIVE_2 ON Q_<SYSID>.DATA_OUT_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE INDEX I_DATA_OUT_LOG_ARCHIVE_3 ON Q_<SYSID>.DATA_OUT_LOG_ARCHIVE (RECORD_DATE)
~
CREATE TABLE Q_<SYSID>.DATA_OUT_ERRORS
(
  DATA_OUT_ID BIGINT NOT NULL,
  ERROR_DATE DATETIME2 DEFAULT CURRENT_TIMESTAMP NOT NULL,
  ERROR_CODE INTEGER DEFAULT 0 NOT NULL,
  ERROR_TEXT NVARCHAR(MAX)
)
~
CREATE INDEX I_DATA_OUT_ERRORS_1 ON Q_<SYSID>.DATA_OUT_ERRORS (ERROR_DATE)
~
CREATE INDEX I_DATA_OUT_ERRORS_2 ON Q_<SYSID>.DATA_OUT_ERRORS (DATA_OUT_ID)
~
CREATE INDEX I_DATA_OUT_ERRORS_3 ON Q_<SYSID>.DATA_OUT_ERRORS (ERROR_CODE)
~
CREATE FUNCTION Q_<SYSID>.GET_IN_VALUE_3_11(@P_SYS_ID NVARCHAR(4000) = NULL, @P_DATA_TYPES VARCHAR(4000) = NULL, @P_SUBQ_ID BIGINT = 0)
RETURNS TABLE AS
RETURN (SELECT
          TOP 1 NULL ROW_ID,
          DATA_IN_ID,
          DATA_OUT_ID,
          SYS_ID,
          '<SYSID>' SYS_2_ID,
          DATA_TYPE,
          DATA_VALUE,
          META_INFO,
          RECORD_DATE,
          EXPIRE_DATE,
          REPLACE_ID
        FROM DATA_IN, DATA_IN_MSG
    	  WHERE
		      ('''' + REPLACE(REPLACE(REPLACE(@P_SYS_ID, ';', ','), ' ', ''), ',', ''',''') + '''' LIKE '%''' + SYS_ID + '''%' OR @P_SYS_ID IS NULL)
		      AND
		      ('''' + REPLACE(REPLACE(REPLACE(@P_DATA_TYPES, ';', ','), ' ', ''), ',', ''',''') + '''' LIKE '%''' + CAST(DATA_TYPE AS VARCHAR) + '''%' OR @P_DATA_TYPES IS NULL)
		      AND SUBQ_ID = @P_SUBQ_ID AND DATA_IN.MSG_ID = DATA_IN_MSG.MSG_ID
        ORDER BY DATA_IN_ID ASC)
~
CREATE FUNCTION Q_<SYSID>.GET_OUT_VALUE_2_11(@P_SYS_ID NVARCHAR(4000) = NULL, @P_DATA_TYPES VARCHAR(4000) = NULL)
RETURNS TABLE AS
RETURN (SELECT
          TOP 1 NULL ROW_ID,
          NULL DATA_IN_ID,
          DATA_OUT_ID,
          '<SYSID>' SYS_ID,
          SYS_ID SYS_2_ID,
          DATA_TYPE,
          DATA_VALUE,
          META_INFO,
          RECORD_DATE,
          EXPIRE_DATE,
          REPLACE_ID
        FROM DATA_OUT, DATA_OUT_MSG
    	  WHERE
		      ('''' + REPLACE(REPLACE(REPLACE(@P_SYS_ID, ';', ','), ' ', ''), ',', ''',''') + '''' LIKE '%''' + SYS_ID + '''%' OR @P_SYS_ID IS NULL)
		      AND
		      ('''' + REPLACE(REPLACE(REPLACE(@P_DATA_TYPES, ';', ','), ' ', ''), ',', ''',''') + '''' LIKE '%''' + CAST(DATA_TYPE AS VARCHAR) + '''%' OR @P_DATA_TYPES IS NULL)
		      AND DATA_OUT.MSG_ID = DATA_OUT_MSG.MSG_ID AND TRANS_TTL = '3000-01-01T00:00:00'
        ORDER BY DATA_OUT_ID ASC)
~
CREATE PROCEDURE Q_<SYSID>.COMMIT_IN_PROCESSING_4(@P_DATA_IN_ID BIGINT, @P_RECORD_DATE DATETIME2, @P_ERROR_TEXT NVARCHAR(MAX) = NULL, @P_ROW_ID NVARCHAR(128) = NULL)
AS
BEGIN
  DECLARE @V_TRANSFER_DATE DATETIME2;

  SET @V_TRANSFER_DATE = CURRENT_TIMESTAMP;

  IF @P_ERROR_TEXT IS NOT NULL
    INSERT INTO DATA_IN_ERRORS (DATA_IN_ID, ERROR_DATE, ERROR_TEXT) VALUES (@P_DATA_IN_ID, @V_TRANSFER_DATE, @P_ERROR_TEXT);

  INSERT INTO DATA_IN_LOG (DATA_IN_ID,
                           DATA_OUT_ID,
                           SYS_ID,
                           DATA_TYPE,
                           RECORD_DATE,
                           SUBQ_ID,
                           MSG_ID,
                           TRANSFER_DATE,
                           REPLACE_ID)
  SELECT
      DATA_IN_ID,
      DATA_OUT_ID,
      SYS_ID,
      DATA_TYPE,
      RECORD_DATE,
      SUBQ_ID,
      MSG_ID,
      @V_TRANSFER_DATE,
      REPLACE_ID
  FROM DATA_IN
  WHERE DATA_IN_ID = @P_DATA_IN_ID AND RECORD_DATE = @P_RECORD_DATE;

  DELETE FROM DATA_IN WHERE DATA_IN_ID = @P_DATA_IN_ID AND RECORD_DATE = @P_RECORD_DATE;
END
~
CREATE PROCEDURE Q_<SYSID>.ROLLBACK_IN_PROCESSING_4(@P_DATA_IN_ID BIGINT, @P_ERROR_CODE INTEGER, @P_ERROR_TEXT NVARCHAR(MAX), @P_ROW_ID NVARCHAR(128) = NULL)
AS
  INSERT INTO DATA_IN_ERRORS (DATA_IN_ID, ERROR_CODE, ERROR_TEXT) VALUES (@P_DATA_IN_ID, @P_ERROR_CODE, @P_ERROR_TEXT)
~
CREATE PROCEDURE Q_<SYSID>.COMMIT_OUT_PROCESSING_3(@P_DATA_OUT_ID BIGINT, @P_ERROR_TEXT NVARCHAR(MAX) = NULL, @P_ROW_ID NVARCHAR(128) = NULL)
AS
BEGIN
  DECLARE @V_TRANSFER_DATE DATETIME2;

  SET @V_TRANSFER_DATE = CURRENT_TIMESTAMP;

  IF @P_ERROR_TEXT IS NOT NULL
    INSERT INTO DATA_OUT_ERRORS (DATA_OUT_ID, ERROR_DATE, ERROR_TEXT) VALUES (@P_DATA_OUT_ID, @V_TRANSFER_DATE, @P_ERROR_TEXT);

  INSERT INTO DATA_OUT_LOG (DATA_OUT_ID,
                            SYS_ID,
                            DATA_TYPE,
                            RECORD_DATE,
                            MSG_ID,
                            TRANSFER_DATE,
                            REPLACE_ID)
  SELECT
    DATA_OUT_ID,
    SYS_ID,
    DATA_TYPE,
    RECORD_DATE,
    MSG_ID,
    @V_TRANSFER_DATE,
    REPLACE_ID
  FROM DATA_OUT
  WHERE DATA_OUT_ID = @P_DATA_OUT_ID;

  DELETE FROM DATA_OUT WHERE DATA_OUT_ID = @P_DATA_OUT_ID;
END
~
CREATE PROCEDURE Q_<SYSID>.ROLLBACK_OUT_PROCESSING_4(@P_DATA_OUT_ID BIGINT, @P_ERROR_CODE INTEGER, @P_ERROR_TEXT NVARCHAR(MAX), @P_ROW_ID NVARCHAR(128) = NULL)
AS
  INSERT INTO DATA_OUT_ERRORS (DATA_OUT_ID, ERROR_CODE, ERROR_TEXT) VALUES (@P_DATA_OUT_ID, @P_ERROR_CODE, @P_ERROR_TEXT);
~
CREATE PROCEDURE Q_<SYSID>.CHANGE_IN_SUBQ_3(@P_SUBQ_ID BIGINT, @P_DATA_IN_ID BIGINT, @P_ROW_ID NVARCHAR(128) = NULL)
AS
    UPDATE DATA_IN SET SUBQ_ID = @P_SUBQ_ID WHERE DATA_IN_ID = @P_DATA_IN_ID;
~
CREATE PROCEDURE Q_<SYSID>.PUT_OUT_VALUE_9_1(@P_SYS_ID NVARCHAR(32), @P_DATA_TYPE INTEGER, @P_DATA_VALUE NVARCHAR(MAX), @P_META_INFO NVARCHAR(MAX) = NULL, @P_EXPIRE_DATE DATETIME2 = NULL, @P_REPLACE_ID NVARCHAR(100) = NULL, @P_TRANS_ID NVARCHAR(50) = NULL, @P_TRANS_SEQ_NO BIGINT = NULL, @P_TRANS_TTL_SECONDS BIGINT = 3600)
AS
BEGIN
  SET NOCOUNT ON

  DECLARE @V_MSG_ID BIGINT;
  INSERT INTO DATA_OUT_MSG(DATA_VALUE, META_INFO, EXPIRE_DATE) VALUES (@P_DATA_VALUE, @P_META_INFO, @P_EXPIRE_DATE);
  SET @V_MSG_ID = SCOPE_IDENTITY()

  IF @P_SYS_ID IS NULL OR @P_SYS_ID = 'ANY$Y$TEM'
    INSERT INTO DATA_OUT(SYS_ID, DATA_TYPE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) SELECT SYS_ID, @P_DATA_TYPE, @V_MSG_ID, @P_REPLACE_ID, @P_TRANS_ID, ISNULL(@P_TRANS_SEQ_NO, @V_MSG_ID), CASE WHEN @P_TRANS_ID IS NULL THEN '3000-01-01T00:00:00' ELSE (SELECT ISNULL(MIN(TRANS_TTL), DATEADD(SECOND, ISNULL(@P_TRANS_TTL_SECONDS, 3600), CURRENT_TIMESTAMP)) FROM DATA_OUT WHERE TRANS_ID = @P_TRANS_ID AND TRANS_TTL < '3000-01-01T00:00:00') END FROM EXT_TYPES WHERE DATA_TYPE = @P_DATA_TYPE
  ELSE
    INSERT INTO DATA_OUT(SYS_ID, DATA_TYPE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) VALUES (@P_SYS_ID, @P_DATA_TYPE, @V_MSG_ID, @P_REPLACE_ID, @P_TRANS_ID, ISNULL(@P_TRANS_SEQ_NO, @V_MSG_ID), CASE WHEN @P_TRANS_ID IS NULL THEN '3000-01-01T00:00:00' ELSE (SELECT ISNULL(MIN(TRANS_TTL), DATEADD(SECOND, ISNULL(@P_TRANS_TTL_SECONDS, 3600), CURRENT_TIMESTAMP)) FROM DATA_OUT WHERE TRANS_ID = @P_TRANS_ID AND TRANS_TTL < '3000-01-01T00:00:00') END);

  RETURN @V_MSG_ID;
END
~
CREATE PROCEDURE Q_<SYSID>.PUT_IN_VALUE_9_1(@P_SYS_ID NVARCHAR(32), @P_DATA_OUT_ID BIGINT, @P_DATA_TYPE INTEGER, @P_DATA_VALUE NVARCHAR(MAX), @P_RECORD_DATE DATETIME2 = NULL, @P_SUBQ_ID BIGINT = 0, @P_META_INFO NVARCHAR(MAX) = NULL, @P_EXPIRE_DATE DATETIME2 = NULL, @P_REPLACE_ID NVARCHAR(100) = NULL)
AS
BEGIN
  SET NOCOUNT ON

  DECLARE @V_MSG_ID BIGINT;
  INSERT INTO DATA_IN_MSG(DATA_VALUE, META_INFO, EXPIRE_DATE) VALUES (@P_DATA_VALUE, @P_META_INFO, @P_EXPIRE_DATE);
  SET @V_MSG_ID = SCOPE_IDENTITY()

  BEGIN TRY
	  INSERT INTO DATA_IN (DATA_IN_ID, SYS_ID, DATA_OUT_ID, DATA_TYPE, RECORD_DATE, SUBQ_ID, MSG_ID, REPLACE_ID) VALUES (@V_MSG_ID, @P_SYS_ID, @P_DATA_OUT_ID, @P_DATA_TYPE, ISNULL(@P_RECORD_DATE, CURRENT_TIMESTAMP), ISNULL(@P_SUBQ_ID, 0), @V_MSG_ID, @P_REPLACE_ID);
  END TRY
  BEGIN CATCH
    IF (ERROR_NUMBER() = 2601)
    BEGIN
      DECLARE @V_DATA_IN_ID  BIGINT;
      DECLARE @V_RECORD_DATE DATETIME2;
      DECLARE @V_SUBQ_ID     BIGINT;

      SELECT @V_DATA_IN_ID = DATA_IN_ID, @V_RECORD_DATE = RECORD_DATE, @V_SUBQ_ID = SUBQ_ID FROM DATA_IN WHERE REPLACE_ID = @P_REPLACE_ID;
      EXEC Q_<SYSID>.COMMIT_IN_PROCESSING_4 @V_DATA_IN_ID, @V_RECORD_DATE, 'Message replaced!', NULL;
      INSERT INTO DATA_IN(DATA_IN_ID, SYS_ID, DATA_OUT_ID, DATA_TYPE, RECORD_DATE, SUBQ_ID, MSG_ID, REPLACE_ID) VALUES (@V_DATA_IN_ID, @P_SYS_ID, @P_DATA_OUT_ID, @P_DATA_TYPE, ISNULL(@P_RECORD_DATE, CURRENT_TIMESTAMP), ISNULL(@V_SUBQ_ID, 0), @V_MSG_ID, @P_REPLACE_ID);
    END
    ELSE
      THROW;
/*
BEGIN
   DECLARE
   @ErMessage NVARCHAR(2048),
   @ErSeverity INT,
   @ErState INT

   SELECT @ErMessage = ERROR_MESSAGE(), @ErSeverity = ERROR_SEVERITY(), @ErState = ERROR_STATE()

   RAISERROR(@ErMessage, @ErSeverity, @ErState)
END
*/
  END CATCH;

  RETURN @V_MSG_ID;
END
~
CREATE PROCEDURE Q_<SYSID>.SEND_OUT_TRANS_1(@P_TRANS_ID NVARCHAR(50))
AS
BEGIN
    SET NOCOUNT ON
    INSERT INTO DATA_OUT(SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) SELECT SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, '3000-01-01T00:00:00' FROM DATA_OUT WHERE TRANS_ID = @P_TRANS_ID AND TRANS_TTL < '3000-01-01T00:00:00' ORDER BY TRANS_SEQ_NO;
    DELETE FROM DATA_OUT WHERE TRANS_ID = @P_TRANS_ID AND TRANS_TTL < '3000-01-01T00:00:00';
END;
~
CREATE PROCEDURE Q_<SYSID>.MOVE_DATA_IN_TO_LOG (@P_ROWS INT = 1)
AS
BEGIN
    DECLARE @V_COUNT INT = 0;
    DECLARE @V_DATA_IN_ID BIGINT;
    DECLARE @V_TRANSFER_DATE DATETIME2;
    DECLARE @RESULT INT;

    EXEC @RESULT = SP_GETAPPLOCK @RESOURCE = 'Q_<SYSID>_MOVE_DATA_IN_TO_LOG', @LOCKMODE = 'Exclusive', @LockOwner = 'Session', @LockTimeout = '0';

    IF @RESULT >= 0
    BEGIN
        BEGIN TRY
            WHILE @V_COUNT < @P_ROWS
            BEGIN
                SELECT TOP 1 @V_DATA_IN_ID = DATA_IN_ID, @V_TRANSFER_DATE = TRANSFER_DATE FROM DATA_IN_LOG;
                IF @@ROWCOUNT < 1
                    BREAK

                INSERT INTO DATA_IN_LOG_ARCHIVE
                (
                    DATA_IN_ID,
                    DATA_OUT_ID,
                    SYS_ID,
                    DATA_TYPE,
                    RECORD_DATE,
                    TRANSFER_DATE,
                    SUBQ_ID,
                    MSG_ID,
                    REPLACE_ID
                )
                SELECT
                    DATA_IN_ID,
                    DATA_OUT_ID,
                    SYS_ID,
                    DATA_TYPE,
                    RECORD_DATE,
                    TRANSFER_DATE,
                    SUBQ_ID,
                    MSG_ID,
                    REPLACE_ID
                FROM DATA_IN_LOG
                WHERE DATA_IN_ID = @V_DATA_IN_ID AND TRANSFER_DATE = @V_TRANSFER_DATE;

                DELETE FROM DATA_IN_LOG WHERE DATA_IN_ID = @V_DATA_IN_ID AND TRANSFER_DATE = @V_TRANSFER_DATE;

                SET @V_COUNT = @V_COUNT + 1;
            END
            END TRY
            BEGIN CATCH
            END CATCH;

            EXEC @RESULT = SP_RELEASEAPPLOCK @RESOURCE = 'Q_<SYSID>_MOVE_DATA_IN_TO_LOG', @LockOwner = 'Session';
    END;
    RETURN @V_COUNT;
END;
~
CREATE PROCEDURE Q_<SYSID>.MOVE_DATA_OUT_TO_LOG (@P_ROWS INT = 1)
AS
BEGIN
    DECLARE @V_COUNT INT = 0;
    DECLARE @V_COUNT2 INT = 0;
    DECLARE @V_DATA_OUT_ID BIGINT;
    DECLARE @V_TRANSFER_DATE DATETIME2;
    DECLARE @V_TRANS_ID NVARCHAR(50);
    DECLARE @V_TMP NVARCHAR(100);
    DECLARE @RESULT INT;


    EXEC @RESULT = SP_GETAPPLOCK @RESOURCE = 'Q_<SYSID>_MOVE_DATA_OUT_TO_LOG', @LOCKMODE = 'Exclusive', @LockOwner = 'Session', @LockTimeout = '0';

    IF @RESULT >= 0
    BEGIN
        BEGIN TRY
            WHILE @V_COUNT < @P_ROWS
            BEGIN
                SELECT TOP 1 @V_DATA_OUT_ID = DATA_OUT_ID, @V_TRANSFER_DATE = TRANSFER_DATE FROM DATA_OUT_LOG;
                IF @@ROWCOUNT < 1
                    BREAK

                INSERT INTO DATA_OUT_LOG_ARCHIVE
                (
                    DATA_OUT_ID,
                    SYS_ID,
                    DATA_TYPE,
                    RECORD_DATE,
                    TRANSFER_DATE,
                    MSG_ID,
                    REPLACE_ID
                )
                SELECT
                    DATA_OUT_ID,
                    SYS_ID,
                    DATA_TYPE,
                    RECORD_DATE,
                    TRANSFER_DATE,
                    MSG_ID,
                    REPLACE_ID
                FROM DATA_OUT_LOG
                WHERE DATA_OUT_ID = @V_DATA_OUT_ID AND TRANSFER_DATE = @V_TRANSFER_DATE;

                DELETE FROM DATA_OUT_LOG WHERE DATA_OUT_ID = @V_DATA_OUT_ID AND TRANSFER_DATE = @V_TRANSFER_DATE;

                SET @V_COUNT = @V_COUNT + 1;
            END
        END TRY
        BEGIN CATCH
        END CATCH;

        BEGIN TRY
            WHILE @V_COUNT2 < @P_ROWS
            BEGIN
                SELECT TOP 1 @V_DATA_OUT_ID = DATA_OUT_ID, @V_TRANS_ID = TRANS_ID FROM DATA_OUT WHERE TRANS_TTL < CURRENT_TIMESTAMP;
                IF @@ROWCOUNT < 1
                    BREAK

                SET @V_TMP = 'Trans lost! TransId = {' + @V_TRANS_ID + '}';
                EXEC Q_<SYSID>.COMMIT_OUT_PROCESSING_3 @V_DATA_OUT_ID, @V_TMP , NULL;

                SET @V_COUNT2 = @V_COUNT2 + 1;
            END
        END TRY
        BEGIN CATCH
        END CATCH;

        EXEC @RESULT = SP_RELEASEAPPLOCK @RESOURCE = 'Q_<SYSID>_MOVE_DATA_OUT_TO_LOG', @LockOwner = 'Session';
    END;
    RETURN (@V_COUNT + @V_COUNT2);
END;
~
CREATE ROLE Q_<SYSID>_SVC_ROLE
~
GRANT SELECT ON Q_<SYSID>.GET_IN_VALUE_3_11 TO Q_<SYSID>_SVC_ROLE
~
GRANT SELECT ON Q_<SYSID>.GET_OUT_VALUE_2_11 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.PUT_OUT_VALUE_9_1 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.PUT_IN_VALUE_9_1 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.COMMIT_IN_PROCESSING_4 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.COMMIT_OUT_PROCESSING_3 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.ROLLBACK_IN_PROCESSING_4 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.ROLLBACK_OUT_PROCESSING_4 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.CHANGE_IN_SUBQ_3 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.SEND_OUT_TRANS_1 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.MOVE_DATA_IN_TO_LOG TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.MOVE_DATA_OUT_TO_LOG TO Q_<SYSID>_SVC_ROLE
~
CREATE LOGIN Q_<SYSID>_SVC WITH PASSWORD = '<PASSWORD>', DEFAULT_DATABASE = "<STORAGE>", CHECK_POLICY = OFF
~
CREATE USER Q_<SYSID>_SVC FOR LOGIN Q_<SYSID>_SVC WITH DEFAULT_SCHEMA = Q_<SYSID>
~
EXEC SP_ADDROLEMEMBER 'Q_<SYSID>_SVC_ROLE', 'Q_<SYSID>_SVC'
~
CREATE SYNONYM Q_<SYSID>.GET_VALUE FOR Q_<SYSID>.GET_IN_VALUE_3_11
~
CREATE SYNONYM Q_<SYSID>.PUT_VALUE FOR Q_<SYSID>.PUT_OUT_VALUE_9_1
~
CREATE SYNONYM Q_<SYSID>.COMMIT_PROCESSING FOR Q_<SYSID>.COMMIT_IN_PROCESSING_4
~
CREATE SYNONYM Q_<SYSID>.ROLLBACK_PROCESSING FOR Q_<SYSID>.ROLLBACK_IN_PROCESSING_4
~
CREATE SYNONYM Q_<SYSID>.SEND_OUT_TRANS FOR Q_<SYSID>.SEND_OUT_TRANS_1
~
CREATE ROLE Q_<SYSID>_CLI_ROLE
~
GRANT SELECT ON Q_<SYSID>.GET_VALUE TO Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.PUT_VALUE TO Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.COMMIT_PROCESSING TO Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.ROLLBACK_PROCESSING TO Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.SEND_OUT_TRANS TO Q_<SYSID>_CLI_ROLE
~
