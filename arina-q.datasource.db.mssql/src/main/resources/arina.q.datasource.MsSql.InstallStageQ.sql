CREATE TABLE Q_<SYSID>.STAGES_MSG
(
  MSG_ID    BIGINT PRIMARY KEY IDENTITY (1, 1) NOT NULL,
  STAGE_XML NVARCHAR(MAX)                      NOT NULL,
  META_INFO NVARCHAR(MAX)
)
~
CREATE TABLE Q_<SYSID>.STAGES
(
  REQUEST_ID BIGINT NOT NULL PRIMARY KEY,
  REQUEST_DATE DATETIME2 DEFAULT CURRENT_TIMESTAMP NOT NULL,
  MSG_ID BIGINT NOT NULL,
  EXT_ID NVARCHAR(50),
  SYS_ID NVARCHAR(50),
  STAGE_DATE DATETIME2 NOT NULL,
  STAGE NVARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  PROCESS_AFTER DATETIME2 DEFAULT CURRENT_TIMESTAMP NOT NULL,
  DEP_ID NVARCHAR(100),
  PARENT_DEP_ID NVARCHAR(4000)
)
~
CREATE INDEX I_STAGES_1 ON Q_<SYSID>.STAGES (PROCESS_AFTER, STAGE, SYS_ID)
~
CREATE INDEX I_STAGES_2 ON Q_<SYSID>.STAGES (DEP_ID)
~
CREATE TABLE Q_<SYSID>.STAGES_LOG
(
  REQUEST_ID BIGINT NOT NULL,
  REQUEST_DATE DATETIME2 NOT NULL,
  MSG_ID BIGINT NOT NULL,
  EXT_ID NVARCHAR(50),
  SYS_ID NVARCHAR(50),
  STAGE_DATE DATETIME2 NOT NULL,
  STAGE NVARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  PROCESS_AFTER DATETIME2 NOT NULL,
  DEP_ID NVARCHAR(100),
  PARENT_DEP_ID NVARCHAR(4000),
  TRANSFER_DATE DATETIME2 DEFAULT CURRENT_TIMESTAMP NOT NULL,
  FINAL NUMERIC(1) DEFAULT 0 NOT NULL CHECK (FINAL IN (1, 0))
)
~
CREATE INDEX I_STAGES_LOG_1 ON Q_<SYSID>.STAGES_LOG (REQUEST_ID)
~
CREATE TABLE Q_<SYSID>.STAGES_LOG_ARCHIVE
(
  REQUEST_ID BIGINT NOT NULL,
  REQUEST_DATE DATETIME2 NOT NULL,
  MSG_ID BIGINT NOT NULL,
  EXT_ID NVARCHAR(50),
  SYS_ID NVARCHAR(50),
  STAGE_DATE DATETIME2 NOT NULL,
  STAGE NVARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  PROCESS_AFTER DATETIME2 NOT NULL,
  DEP_ID NVARCHAR(100),
  PARENT_DEP_ID NVARCHAR(4000),
  TRANSFER_DATE DATETIME2 NOT NULL,
  FINAL NUMERIC(1) NOT NULL
)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_1 ON Q_<SYSID>.STAGES_LOG_ARCHIVE (REQUEST_ID, FINAL)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_2 ON Q_<SYSID>.STAGES_LOG_ARCHIVE (REQUEST_DATE)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_3 ON Q_<SYSID>.STAGES_LOG_ARCHIVE (EXT_ID, SYS_ID)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_4 ON Q_<SYSID>.STAGES_LOG_ARCHIVE (STAGE_DATE, REQUEST_ID)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_5 ON Q_<SYSID>.STAGES_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE TABLE Q_<SYSID>.STAGES_ERRORS
(
  REQUEST_ID BIGINT NOT NULL,
  STAGE NVARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  ERROR_DATE DATETIME2 DEFAULT CURRENT_TIMESTAMP NOT NULL,
  ERROR_CODE INT DEFAULT 0 NOT NULL,
  ERROR_TEXT NVARCHAR(MAX)
)
~
CREATE INDEX I_STAGES_ERRORS_1 ON Q_<SYSID>.STAGES_ERRORS (REQUEST_ID, STAGE)
~
CREATE INDEX I_STAGES_ERRORS_2 ON Q_<SYSID>.STAGES_ERRORS (ERROR_CODE)
~
CREATE INDEX I_STAGES_ERRORS_3 ON Q_<SYSID>.STAGES_ERRORS (ERROR_DATE)
~
CREATE TABLE Q_<SYSID>.STAGES_DEPS
(
  REQUEST_ID BIGINT NOT NULL,
  PARENT_REQUEST_ID BIGINT NOT NULL
)
~
CREATE INDEX I_STAGES_DEPS_1 ON Q_<SYSID>.STAGES_DEPS (REQUEST_ID)
~
CREATE INDEX I_STAGES_DEPS_2 ON Q_<SYSID>.STAGES_DEPS (PARENT_REQUEST_ID)
~
ALTER TABLE Q_<SYSID>.STAGES_DEPS
ADD FOREIGN KEY (PARENT_REQUEST_ID)
REFERENCES Q_<SYSID>.STAGES (REQUEST_ID)
ON DELETE CASCADE
~
ALTER TABLE Q_<SYSID>.STAGES_DEPS
ADD FOREIGN KEY (REQUEST_ID)
REFERENCES Q_<SYSID>.STAGES (REQUEST_ID)
ON DELETE NO ACTION
~
CREATE PROCEDURE Q_<SYSID>.PUT_STAGE_VALUE_11_1
(
  @P_EXT_ID NVARCHAR(50),
  @P_SYS_ID NVARCHAR(50),
  @P_REQUEST_ID BIGINT,
  @P_STAGE_XML NVARCHAR(MAX),
  @P_STAGE NVARCHAR(50),
  @P_PROCESS_AFTER_DELAY BIGINT,
  @P_FINAL INT,
  @P_DEP_ID  NVARCHAR(100),
  @P_PARENT_DEP_ID  NVARCHAR(4000),
  @P_META_INFO NVARCHAR(MAX)
)
AS
BEGIN
    DECLARE @V_MSG_ID BIGINT;
    DECLARE @V_TRANSFER_DATE DATETIME2;

    INSERT INTO STAGES_MSG
    (
      STAGE_XML,
      META_INFO
    )
    VALUES
    (
      @P_STAGE_XML,
      @P_META_INFO
    );

    SET @V_MSG_ID = SCOPE_IDENTITY()

	IF @P_REQUEST_ID IS NULL
	BEGIN
        INSERT INTO STAGES
        (
            REQUEST_ID,
            REQUEST_DATE,
            MSG_ID,
            EXT_ID,
            SYS_ID,
            STAGE_DATE,
            STAGE,
            ITERATION,
            PROCESS_AFTER,
            DEP_ID,
            PARENT_DEP_ID
        )
        VALUES
        (
            @V_MSG_ID,
            CURRENT_TIMESTAMP,
            @V_MSG_ID,
            @P_EXT_ID,
            @P_SYS_ID,
            CURRENT_TIMESTAMP,
            @P_STAGE,
            1,
            DATEADD(MILLISECOND, @P_PROCESS_AFTER_DELAY, CURRENT_TIMESTAMP),
            @P_DEP_ID,
            @P_PARENT_DEP_ID
        );

        IF @P_PARENT_DEP_ID IS NOT NULL
        BEGIN
            INSERT INTO STAGES_DEPS
            (
                REQUEST_ID,
                PARENT_REQUEST_ID
            )
            SELECT @V_MSG_ID, REQUEST_ID
            FROM STAGES
            WHERE REQUEST_ID < @V_MSG_ID AND
                  DEP_ID IN (SELECT SPLIT.A.value('.', 'NVARCHAR(100)') FROM (SELECT  CAST ('<M>' + REPLACE(REPLACE(@P_PARENT_DEP_ID, ';', ','), ',', '</M><M>') + '</M>' AS XML) AS STRING) AS A OUTER APPLY STRING.nodes ('/M') AS SPLIT(A));
        END
	END
	ELSE
	BEGIN
        SET @V_TRANSFER_DATE = CURRENT_TIMESTAMP;

        INSERT INTO STAGES_LOG
        (
            REQUEST_ID,
            REQUEST_DATE,
            MSG_ID,
            EXT_ID,
            SYS_ID,
            STAGE_DATE,
            STAGE,
            ITERATION,
            PROCESS_AFTER,
            TRANSFER_DATE,
            DEP_ID,
            PARENT_DEP_ID
        )
        SELECT
            REQUEST_ID,
            REQUEST_DATE,
            MSG_ID,
            EXT_ID,
            SYS_ID,
            STAGE_DATE,
            STAGE,
            ITERATION,
            PROCESS_AFTER,
            @V_TRANSFER_DATE,
            DEP_ID,
            PARENT_DEP_ID
        FROM STAGES
        WHERE REQUEST_ID = @P_REQUEST_ID;

        IF @P_FINAL <> 0
        BEGIN
            INSERT INTO STAGES_LOG_ARCHIVE
            (
                REQUEST_ID,
                REQUEST_DATE,
                MSG_ID,
                EXT_ID,
                SYS_ID,
                STAGE_DATE,
                STAGE,
                ITERATION,
                PROCESS_AFTER,
                DEP_ID,
                PARENT_DEP_ID,
                TRANSFER_DATE,
                FINAL
            )
            SELECT
                REQUEST_ID,
                REQUEST_DATE,
                @V_MSG_ID,
                EXT_ID,
                SYS_ID,
                @V_TRANSFER_DATE,
                @P_STAGE,
                1,
                @V_TRANSFER_DATE,
                DEP_ID,
                PARENT_DEP_ID,
                @V_TRANSFER_DATE,
                @P_FINAL
            FROM STAGES
            WHERE REQUEST_ID = @P_REQUEST_ID;

            DELETE FROM STAGES
            WHERE REQUEST_ID = @P_REQUEST_ID;
        END
        ELSE
        BEGIN
            UPDATE STAGES
            SET
                STAGE_DATE = @V_TRANSFER_DATE,
                MSG_ID = @V_MSG_ID,
                STAGE = @P_STAGE,
                ITERATION = 1,
                PROCESS_AFTER = DATEADD(MILLISECOND, @P_PROCESS_AFTER_DELAY, @V_TRANSFER_DATE)
            WHERE REQUEST_ID = @P_REQUEST_ID;
        END
	END

    RETURN ISNULL(@P_REQUEST_ID, @V_MSG_ID);
END
~
CREATE FUNCTION Q_<SYSID>.GET_STAGE_VALUE_3_10(@P_STAGE NVARCHAR(32), @P_SYS_ID NVARCHAR(32) = NULL, @P_RECORDS INT = 1)
RETURNS TABLE
AS
    RETURN
        SELECT TOP (@P_RECORDS)
            NULL ROW_ID, EXT_ID, SYS_ID, REQUEST_DATE, STAGE_DATE, REQUEST_ID, STAGE_XML, META_INFO, STAGE, ITERATION
        FROM STAGES, STAGES_MSG
        WHERE PROCESS_AFTER <= CURRENT_TIMESTAMP AND STAGE LIKE @P_STAGE AND SYS_ID = ISNULL(@P_SYS_ID, SYS_ID) AND STAGES.MSG_ID = STAGES_MSG.MSG_ID AND NOT EXISTS (SELECT 1 FROM STAGES_DEPS WHERE STAGES_DEPS.REQUEST_ID = STAGES.REQUEST_ID)
        ORDER BY PROCESS_AFTER ASC
~
CREATE FUNCTION Q_<SYSID>.GET_FINAL_STAGE_VALUE_1_10(@P_REQUEST_ID BIGINT = 1)
RETURNS TABLE
AS
    RETURN
        SELECT TOP 1
            NULL ROW_ID, EXT_ID, SYS_ID, REQUEST_DATE, STAGE_DATE, REQUEST_ID, STAGE_XML, META_INFO, STAGE, ITERATION
        FROM STAGES_LOG_ARCHIVE, STAGES_MSG
        WHERE STAGES_LOG_ARCHIVE.MSG_ID = STAGES_MSG.MSG_ID AND REQUEST_ID = @P_REQUEST_ID AND FINAL = 1
~
CREATE PROCEDURE Q_<SYSID>.COMMIT_STAGE_PROCESSING_8
(@P_STAGE_DATE DATETIME2,
 @P_REQUEST_ID BIGINT,
 @P_ERROR_CODE INT = 0,
 @P_ERROR_TEXT NVARCHAR(MAX) = NULL,
 @P_PROCESS_AFTER_DELAY BIGINT = 0,
 @P_ROW_ID NVARCHAR(128) = NULL)
AS
BEGIN
    IF @P_ERROR_TEXT IS NOT NULL
    BEGIN
        INSERT INTO STAGES_ERRORS (REQUEST_ID, STAGE, ITERATION, ERROR_DATE, ERROR_CODE, ERROR_TEXT)
        SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP, @P_ERROR_CODE, @P_ERROR_TEXT FROM STAGES WHERE REQUEST_ID = @P_REQUEST_ID AND STAGE_DATE = @P_STAGE_DATE;

        IF @@ROWCOUNT = 0
            INSERT INTO STAGES_ERRORS (REQUEST_ID, STAGE, ITERATION, ERROR_DATE, ERROR_CODE, ERROR_TEXT)
            SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP, @P_ERROR_CODE, @P_ERROR_TEXT FROM STAGES_LOG WHERE REQUEST_ID = @P_REQUEST_ID AND STAGE_DATE = @P_STAGE_DATE
            UNION ALL
            SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP, @P_ERROR_CODE, @P_ERROR_TEXT FROM STAGES_LOG_ARCHIVE WHERE REQUEST_ID = @P_REQUEST_ID AND STAGE_DATE = @P_STAGE_DATE;
    END;

    UPDATE STAGES
    SET
        ITERATION = ITERATION + 1,
        PROCESS_AFTER = DATEADD(MILLISECOND, @P_PROCESS_AFTER_DELAY, CURRENT_TIMESTAMP)
    WHERE REQUEST_ID = @P_REQUEST_ID AND STAGE_DATE = @P_STAGE_DATE;
END
~
CREATE PROCEDURE Q_<SYSID>.ROLLBACK_STAGE_PROCESSING_6
(
 @P_STAGE_DATE DATETIME2,
 @P_REQUEST_ID BIGINT,
 @P_ERROR_CODE INT,
 @P_ERROR_TEXT NVARCHAR(MAX) = NULL,
 @P_ROW_ID NVARCHAR(128) = NULL)
AS
BEGIN
    INSERT INTO STAGES_ERRORS (REQUEST_ID, STAGE, ITERATION, ERROR_DATE, ERROR_CODE, ERROR_TEXT)
    SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP, @P_ERROR_CODE, @P_ERROR_TEXT FROM STAGES WHERE REQUEST_ID = @P_REQUEST_ID AND STAGE_DATE = @P_STAGE_DATE;
END
~
CREATE PROCEDURE Q_<SYSID>.MOVE_STAGE_TO_LOG (@P_ROWS INT = 1)
AS
BEGIN
    DECLARE @V_COUNT INT = 0;
    DECLARE @V_REQUEST_ID BIGINT;
    DECLARE @V_STAGE_DATE DATETIME2;
    DECLARE @RESULT INT;

    EXEC @RESULT = SP_GETAPPLOCK @RESOURCE = 'Q_<SYSID>_MOVE_STAGE_TO_LOG', @LOCKMODE = 'Exclusive', @LockOwner = 'Session', @LockTimeout = '0';

    IF @RESULT >= 0
    BEGIN
        BEGIN TRY
            WHILE @V_COUNT < @P_ROWS
            BEGIN
                SELECT TOP 1 @V_REQUEST_ID = REQUEST_ID, @V_STAGE_DATE = STAGE_DATE FROM STAGES_LOG;
                IF @@ROWCOUNT < 1
                    BREAK

                INSERT INTO STAGES_LOG_ARCHIVE
                (
                    REQUEST_ID,
                    REQUEST_DATE,
                    MSG_ID,
                    EXT_ID,
                    SYS_ID,
                    STAGE_DATE,
                    STAGE,
                    ITERATION,
                    PROCESS_AFTER,
                    DEP_ID,
                    PARENT_DEP_ID,
                    TRANSFER_DATE,
                    FINAL
                )
                SELECT
                    REQUEST_ID,
                    REQUEST_DATE,
                    MSG_ID,
                    EXT_ID,
                    SYS_ID,
                    STAGE_DATE,
                    STAGE,
                    ITERATION,
                    PROCESS_AFTER,
                    DEP_ID,
                    PARENT_DEP_ID,
                    TRANSFER_DATE,
                    FINAL
                FROM STAGES_LOG
                WHERE REQUEST_ID = @V_REQUEST_ID AND STAGE_DATE = @V_STAGE_DATE;

                DELETE FROM STAGES_LOG WHERE REQUEST_ID = @V_REQUEST_ID AND STAGE_DATE = @V_STAGE_DATE;

                SET @V_COUNT = @V_COUNT + 1;
            END
        END TRY
        BEGIN CATCH
        END CATCH;

        EXEC @RESULT = SP_RELEASEAPPLOCK @RESOURCE = 'Q_<SYSID>_MOVE_STAGE_TO_LOG', @LockOwner = 'Session';
    END;
    RETURN @V_COUNT;
END;
~
GRANT EXECUTE ON Q_<SYSID>.COMMIT_STAGE_PROCESSING_8 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.ROLLBACK_STAGE_PROCESSING_6 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.PUT_STAGE_VALUE_11_1 TO Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON Q_<SYSID>.MOVE_STAGE_TO_LOG TO Q_<SYSID>_SVC_ROLE
~
GRANT SELECT ON Q_<SYSID>.GET_STAGE_VALUE_3_10 TO Q_<SYSID>_SVC_ROLE
~
GRANT SELECT ON Q_<SYSID>.GET_FINAL_STAGE_VALUE_1_10 TO Q_<SYSID>_SVC_ROLE
~
