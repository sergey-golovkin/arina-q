CREATE USER Q_<SYSID>_SVC PASSWORD '<PASSWORD>'
~
CREATE TABLE EXT_TYPES
(
  SYS_ID VARCHAR(32) NOT NULL,
  DATA_TYPE INTEGER NOT NULL,
  DESCRIPTION VARCHAR(1024)  NOT NULL,
  PRIMARY KEY (SYS_ID, DATA_TYPE)
)
~
CREATE TABLE TYPES
(
  DATA_TYPE INTEGER NOT NULL,
  DESCRIPTION VARCHAR(1024)  NOT NULL,
  PRIMARY KEY (DATA_TYPE)
)
~
CREATE TABLE DATA_IN_MSG
(
  MSG_ID      BIGINT GENERATED BY DEFAULT AS IDENTITY  NOT NULL PRIMARY KEY,
  DATA_VALUE  BLOB SUB_TYPE TEXT          NOT NULL,
  META_INFO   BLOB SUB_TYPE TEXT,
  EXPIRE_DATE TIMESTAMP
)
~
CREATE TABLE DATA_IN
(
  DATA_IN_ID  BIGINT                              NOT NULL PRIMARY KEY,
  DATA_OUT_ID BIGINT                              NOT NULL,
  SYS_ID      VARCHAR(32)                         NOT NULL,
  DATA_TYPE   INTEGER                             NOT NULL,
  RECORD_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  SUBQ_ID     BIGINT DEFAULT 0                    NOT NULL,
  MSG_ID      BIGINT                              NOT NULL,
  REPLACE_ID  VARCHAR(100)
)
~
CREATE UNIQUE INDEX UI_DATA_IN_1 ON DATA_IN (SUBQ_ID, DATA_IN_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX UI_DATA_IN_2 ON DATA_IN (SUBQ_ID, SYS_ID, DATA_IN_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX UI_DATA_IN_3 ON DATA_IN (REPLACE_ID)
~
ALTER TABLE DATA_IN
ADD FOREIGN KEY (DATA_TYPE)
REFERENCES TYPES (DATA_TYPE)
~
CREATE TABLE DATA_IN_LOG
(
  DATA_IN_ID    BIGINT                              NOT NULL,
  DATA_OUT_ID   BIGINT                              NOT NULL,
  SYS_ID        VARCHAR(32)                         NOT NULL,
  DATA_TYPE     INTEGER                             NOT NULL,
  RECORD_DATE   TIMESTAMP                           NOT NULL,
  SUBQ_ID       BIGINT                              NOT NULL,
  MSG_ID        BIGINT                              NOT NULL,
  TRANSFER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  REPLACE_ID    VARCHAR(100)
)
~
CREATE UNIQUE INDEX UI_DATA_IN_LOG_1 ON DATA_IN_LOG (TRANSFER_DATE, DATA_IN_ID)
~
CREATE TABLE DATA_IN_LOG_ARCHIVE
(
  DATA_IN_ID    BIGINT                              NOT NULL,
  DATA_OUT_ID   BIGINT                              NOT NULL,
  SYS_ID        VARCHAR(32)                         NOT NULL,
  DATA_TYPE     INTEGER                             NOT NULL,
  RECORD_DATE   TIMESTAMP                           NOT NULL,
  SUBQ_ID       BIGINT                              NOT NULL,
  MSG_ID        BIGINT                              NOT NULL,
  TRANSFER_DATE TIMESTAMP                           NOT NULL,
  REPLACE_ID    VARCHAR(100)
)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_1 ON DATA_IN_LOG_ARCHIVE (DATA_IN_ID)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_2 ON DATA_IN_LOG_ARCHIVE (DATA_OUT_ID, SYS_ID)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_3 ON DATA_IN_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE INDEX I_DATA_IN_LOG_ARCHIVE_4 ON DATA_IN_LOG_ARCHIVE (RECORD_DATE)
~
CREATE TABLE DATA_IN_ERRORS
(
  DATA_IN_ID BIGINT NOT NULL,
  ERROR_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  ERROR_CODE INTEGER DEFAULT 0 NOT NULL,
  ERROR_TEXT BLOB SUB_TYPE TEXT
)
~
CREATE INDEX I_DATA_IN_ERRORS_1 ON DATA_IN_ERRORS (ERROR_DATE)
~
CREATE INDEX I_DATA_IN_ERRORS_2 ON DATA_IN_ERRORS (DATA_IN_ID)
~
CREATE INDEX I_DATA_IN_ERRORS_3 ON DATA_IN_ERRORS (ERROR_CODE)
~
CREATE TABLE DATA_OUT_MSG
(
  MSG_ID      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  DATA_VALUE  BLOB SUB_TYPE TEXT              NOT NULL,
  META_INFO   BLOB SUB_TYPE TEXT,
  EXPIRE_DATE TIMESTAMP,
  PRIMARY KEY (MSG_ID)
)
~
CREATE TABLE DATA_OUT
(
  DATA_OUT_ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
  SYS_ID      VARCHAR(32)                         NOT NULL,
  DATA_TYPE   INTEGER                             NOT NULL,
  RECORD_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  MSG_ID      BIGINT                              NOT NULL,
  REPLACE_ID  VARCHAR(100),
  TRANS_ID    VARCHAR(50),
  TRANS_SEQ_NO BIGINT,
  TRANS_TTL   TIMESTAMP DEFAULT '3000-01-01 00:00:00' NOT NULL
)
~
CREATE UNIQUE INDEX UI_DATA_OUT_1 ON DATA_OUT (TRANS_TTL, DATA_OUT_ID, DATA_TYPE)
~
CREATE UNIQUE INDEX UI_DATA_OUT_2 ON DATA_OUT (TRANS_TTL, SYS_ID, DATA_OUT_ID, DATA_TYPE)
~
CREATE INDEX UI_DATA_OUT_3 ON DATA_OUT (TRANS_ID)
~
ALTER TABLE DATA_OUT
ADD FOREIGN KEY (SYS_ID, DATA_TYPE)
REFERENCES EXT_TYPES (SYS_ID, DATA_TYPE)
~
CREATE TABLE DATA_OUT_LOG
(
  DATA_OUT_ID   BIGINT                     NOT NULL,
  SYS_ID        VARCHAR(32)                NOT NULL,
  DATA_TYPE     INTEGER                    NOT NULL,
  RECORD_DATE   TIMESTAMP                  NOT NULL,
  MSG_ID        BIGINT              NOT NULL,
  TRANSFER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  REPLACE_ID    VARCHAR(100)
)
~
CREATE UNIQUE INDEX UI_DATA_OUT_LOG_1 ON DATA_OUT_LOG (TRANSFER_DATE, DATA_OUT_ID)
~
CREATE TABLE DATA_OUT_LOG_ARCHIVE
(
  DATA_OUT_ID   BIGINT              NOT NULL,
  SYS_ID        VARCHAR(32)         NOT NULL,
  DATA_TYPE     INTEGER             NOT NULL,
  RECORD_DATE   TIMESTAMP        NOT NULL,
  MSG_ID        BIGINT              NOT NULL,
  TRANSFER_DATE TIMESTAMP        NOT NULL,
  REPLACE_ID    VARCHAR(100)
)
~
CREATE INDEX I_DATA_OUT_LOG_ARCHIVE_1 ON DATA_OUT_LOG_ARCHIVE (DATA_OUT_ID)
~
CREATE INDEX I_DATA_OUT_LOG_ARCHIVE_2 ON DATA_OUT_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE INDEX I_DATA_OUT_LOG_ARCHIVE_3 ON DATA_OUT_LOG_ARCHIVE (RECORD_DATE)
~
CREATE TABLE DATA_OUT_ERRORS
(
  DATA_OUT_ID BIGINT NOT NULL,
  ERROR_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  ERROR_CODE INTEGER DEFAULT 0 NOT NULL,
  ERROR_TEXT BLOB SUB_TYPE TEXT
)
~
CREATE INDEX I_DATA_OUT_ERRORS_1 ON DATA_OUT_ERRORS (ERROR_DATE)
~
CREATE INDEX I_DATA_OUT_ERRORS_2 ON DATA_OUT_ERRORS (DATA_OUT_ID)
~
CREATE INDEX I_DATA_OUT_ERRORS_3 ON DATA_OUT_ERRORS (ERROR_CODE)
~
CREATE OR ALTER PROCEDURE GET_IN_VALUE_3_11(P_SYS_ID VARCHAR(4000) DEFAULT NULL, P_DATA_TYPES VARCHAR(4000) DEFAULT NULL, P_SUBQ_ID BIGINT DEFAULT 0) RETURNS
(
  ROW_ID VARCHAR(128),
  DATA_IN_ID BIGINT,
  DATA_OUT_ID BIGINT,
  SYS_ID VARCHAR(32),
  SYS_2_ID VARCHAR(32),
  DATA_TYPE INTEGER,
  DATA_VALUE BLOB SUB_TYPE TEXT,
  META_INFO BLOB SUB_TYPE TEXT,
  RECORD_DATE TIMESTAMP,
  EXPIRE_DATE TIMESTAMP,
  REPLACE_ID VARCHAR(100)
)
AS
    DECLARE V_SQL VARCHAR(4000);
BEGIN
    V_SQL = 'SELECT FIRST 1 NULL ROW_ID, DATA_IN_ID, DATA_OUT_ID, SYS_ID, ''<SYSID>'', DATA_TYPE, DATA_VALUE, META_INFO, RECORD_DATE, EXPIRE_DATE, REPLACE_ID FROM DATA_IN, DATA_IN_MSG WHERE DATA_IN.MSG_ID = DATA_IN_MSG.MSG_ID AND SUBQ_ID = ' || :P_SUBQ_ID;

    IF (:P_SYS_ID IS NOT NULL) THEN
       V_SQL = V_SQL || ' AND SYS_ID IN (''' || REPLACE(REPLACE(REPLACE(:P_SYS_ID, ';', ','), ' ', ''), ',', ''',''') || ''')';

    IF (:P_DATA_TYPES IS NOT NULL) THEN
       V_SQL = V_SQL || ' AND DATA_TYPE IN (' || REPLACE(REPLACE(REPLACE(:P_DATA_TYPES, ';', ','), ' ', ''), ',', ''',''') || ')';

    V_SQL = V_SQL || ' ORDER BY DATA_IN_ID ASC';

    FOR EXECUTE STATEMENT V_SQL WITH CALLER PRIVILEGES INTO :ROW_ID, :DATA_IN_ID, :DATA_OUT_ID, :SYS_ID, :SYS_2_ID, :DATA_TYPE, :DATA_VALUE, :META_INFO, :RECORD_DATE, :EXPIRE_DATE, :REPLACE_ID DO SUSPEND;
END
~
CREATE OR ALTER PROCEDURE GET_OUT_VALUE_2_11(P_SYS_ID VARCHAR(4000) DEFAULT NULL, P_DATA_TYPES VARCHAR(4000) DEFAULT NULL) RETURNS
(
  ROW_ID VARCHAR(128),
  DATA_IN_ID BIGINT,
  DATA_OUT_ID BIGINT,
  SYS_ID VARCHAR(32),
  SYS_2_ID VARCHAR(32),
  DATA_TYPE INTEGER,
  DATA_VALUE BLOB SUB_TYPE TEXT,
  META_INFO BLOB SUB_TYPE TEXT,
  RECORD_DATE TIMESTAMP,
  EXPIRE_DATE TIMESTAMP,
  REPLACE_ID VARCHAR(100)
)
AS
    DECLARE V_SQL VARCHAR(4000);
BEGIN
    V_SQL = 'SELECT FIRST 1 NULL ROW_ID, NULL DATA_IN_ID, DATA_OUT_ID, ''<SYSID>'', SYS_ID, DATA_TYPE, DATA_VALUE, META_INFO, RECORD_DATE, EXPIRE_DATE, REPLACE_ID FROM DATA_OUT, DATA_OUT_MSG WHERE DATA_OUT.MSG_ID = DATA_OUT_MSG.MSG_ID AND DATA_OUT.TRANS_TTL = ''3000-01-01 00:00:00''';

    IF (:P_SYS_ID IS NOT NULL) THEN
       V_SQL = V_SQL || ' AND SYS_ID IN (''' || REPLACE(REPLACE(REPLACE(:P_SYS_ID, ';', ','), ' ', ''), ',', ''',''') || ''')';

    IF (:P_DATA_TYPES IS NOT NULL) THEN
       V_SQL = V_SQL || ' AND DATA_TYPE IN (' || REPLACE(REPLACE(REPLACE(:P_DATA_TYPES, ';', ','), ' ', ''), ',', ''',''') || ')';

    V_SQL = V_SQL || ' ORDER BY DATA_OUT_ID ASC';

    FOR EXECUTE STATEMENT V_SQL WITH CALLER PRIVILEGES INTO :ROW_ID, :DATA_IN_ID, :DATA_OUT_ID, :SYS_ID, :SYS_2_ID, :DATA_TYPE, :DATA_VALUE, :META_INFO, :RECORD_DATE, :EXPIRE_DATE, :REPLACE_ID DO SUSPEND;
END
~
CREATE OR ALTER PROCEDURE COMMIT_IN_PROCESSING_4(P_DATA_IN_ID BIGINT, P_RECORD_DATE TIMESTAMP, P_ERROR_TEXT BLOB SUB_TYPE TEXT DEFAULT NULL, P_ROW_ID VARCHAR(128) DEFAULT NULL)
AS
    DECLARE V_TRANSFER_DATE TIMESTAMP;
BEGIN

    :V_TRANSFER_DATE = CURRENT_TIMESTAMP;

    IF (:P_ERROR_TEXT IS NOT NULL) THEN
        INSERT INTO DATA_IN_ERRORS (DATA_IN_ID, ERROR_DATE, ERROR_TEXT) VALUES (:P_DATA_IN_ID, :V_TRANSFER_DATE, :P_ERROR_TEXT);

    INSERT INTO DATA_IN_LOG (DATA_IN_ID,
                                       DATA_OUT_ID,
                                       SYS_ID,
                                       DATA_TYPE,
                                       RECORD_DATE,
                                       SUBQ_ID,
                                       MSG_ID,
                                       TRANSFER_DATE,
                                       REPLACE_ID)
    SELECT
        DATA_IN_ID,
        DATA_OUT_ID,
        SYS_ID,
        DATA_TYPE,
        RECORD_DATE,
        SUBQ_ID,
        MSG_ID,
        :V_TRANSFER_DATE,
        REPLACE_ID
    FROM DATA_IN
    WHERE DATA_IN_ID = :P_DATA_IN_ID AND RECORD_DATE = :P_RECORD_DATE;

    DELETE FROM DATA_IN WHERE DATA_IN_ID = :P_DATA_IN_ID AND RECORD_DATE = :P_RECORD_DATE;
END
~
CREATE OR ALTER PROCEDURE ROLLBACK_IN_PROCESSING_4(P_DATA_IN_ID BIGINT, P_ERROR_CODE INTEGER, P_ERROR_TEXT BLOB SUB_TYPE TEXT, P_ROW_ID VARCHAR(128) DEFAULT NULL)
AS
BEGIN
    INSERT INTO DATA_IN_ERRORS (DATA_IN_ID, ERROR_CODE, ERROR_TEXT) VALUES (:P_DATA_IN_ID, :P_ERROR_CODE, :P_ERROR_TEXT);
END
~
CREATE OR ALTER PROCEDURE COMMIT_OUT_PROCESSING_3(P_DATA_OUT_ID BIGINT, P_ERROR_TEXT BLOB SUB_TYPE TEXT DEFAULT NULL, P_ROW_ID VARCHAR(128) DEFAULT NULL)
AS
    DECLARE V_TRANSFER_DATE TIMESTAMP;
BEGIN

    :V_TRANSFER_DATE = CURRENT_TIMESTAMP;

    IF (:P_ERROR_TEXT IS NOT NULL) THEN
        INSERT INTO DATA_OUT_ERRORS (DATA_OUT_ID, ERROR_DATE, ERROR_TEXT) VALUES (:P_DATA_OUT_ID, :V_TRANSFER_DATE, :P_ERROR_TEXT);

    INSERT INTO DATA_OUT_LOG (DATA_OUT_ID,
                                        SYS_ID,
                                        DATA_TYPE,
                                        RECORD_DATE,
                                        MSG_ID,
                                        TRANSFER_DATE,
                                        REPLACE_ID)
    SELECT
      DATA_OUT_ID,
      SYS_ID,
      DATA_TYPE,
      RECORD_DATE,
      MSG_ID,
      :V_TRANSFER_DATE,
      REPLACE_ID
    FROM DATA_OUT
    WHERE DATA_OUT_ID = :P_DATA_OUT_ID;

    DELETE FROM DATA_OUT WHERE DATA_OUT_ID = :P_DATA_OUT_ID;
END
~
CREATE OR ALTER PROCEDURE ROLLBACK_OUT_PROCESSING_4(P_DATA_OUT_ID BIGINT, P_ERROR_CODE INTEGER, P_ERROR_TEXT BLOB SUB_TYPE TEXT, P_ROW_ID VARCHAR(128) DEFAULT NULL)
AS
BEGIN
    INSERT INTO DATA_OUT_ERRORS (DATA_OUT_ID, ERROR_CODE, ERROR_TEXT) VALUES (:P_DATA_OUT_ID, :P_ERROR_CODE, :P_ERROR_TEXT);
END
~
CREATE OR ALTER PROCEDURE CHANGE_IN_SUBQ_3(P_SUBQ_ID BIGINT, P_DATA_IN_ID BIGINT, P_ROW_ID VARCHAR(128) DEFAULT NULL)
AS
BEGIN
    UPDATE DATA_IN SET SUBQ_ID = :P_SUBQ_ID WHERE DATA_IN_ID = :P_DATA_IN_ID;
END;
~
CREATE OR ALTER PROCEDURE PUT_OUT_VALUE_9_1(P_SYS_ID VARCHAR(32), P_DATA_TYPE INTEGER, P_DATA_VALUE BLOB SUB_TYPE TEXT, P_META_INFO BLOB SUB_TYPE TEXT DEFAULT NULL, P_EXPIRE_DATE TIMESTAMP DEFAULT NULL, P_REPLACE_ID VARCHAR(100) DEFAULT NULL, P_TRANS_ID VARCHAR(50) DEFAULT NULL, P_TRANS_SEQ_NO BIGINT DEFAULT NULL, P_TRANS_TTL_SECONDS BIGINT DEFAULT 3600) RETURNS (V_RESULT BIGINT)
AS
    DECLARE V_MSG_ID BIGINT;
BEGIN
    INSERT INTO DATA_OUT_MSG(DATA_VALUE, META_INFO, EXPIRE_DATE) VALUES (:P_DATA_VALUE, :P_META_INFO, :P_EXPIRE_DATE) RETURNING MSG_ID INTO :V_MSG_ID;
  
    IF (:P_SYS_ID IS NULL OR :P_SYS_ID = 'ANY$Y$TEM') THEN
       INSERT INTO DATA_OUT(SYS_ID, DATA_TYPE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) SELECT SYS_ID, :P_DATA_TYPE, :V_MSG_ID, :P_REPLACE_ID, :P_TRANS_ID, COALESCE(:P_TRANS_SEQ_NO, :V_MSG_ID), (CASE WHEN :P_TRANS_ID IS NULL THEN '3000-01-01 00:00:00' ELSE (SELECT COALESCE(MIN(TRANS_TTL), DATEADD(COALESCE(:P_TRANS_TTL_SECONDS, 3600) SECOND TO CURRENT_TIMESTAMP)) FROM DATA_OUT WHERE TRANS_ID = :P_TRANS_ID AND TRANS_TTL < '3000-01-01 00:00:00') END) FROM EXT_TYPES WHERE DATA_TYPE = :P_DATA_TYPE;
    ELSE
       INSERT INTO DATA_OUT(SYS_ID, DATA_TYPE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) VALUES (:P_SYS_ID, :P_DATA_TYPE, :V_MSG_ID, :P_REPLACE_ID, :P_TRANS_ID, COALESCE(:P_TRANS_SEQ_NO, :V_MSG_ID), CASE WHEN :P_TRANS_ID IS NULL THEN '3000-01-01 00:00:00' ELSE (SELECT COALESCE(MIN(TRANS_TTL), DATEADD(COALESCE(:P_TRANS_TTL_SECONDS, 3600) SECOND TO CURRENT_TIMESTAMP)) FROM DATA_OUT WHERE TRANS_ID = :P_TRANS_ID AND TRANS_TTL < '3000-01-01 00:00:00') END);

    :V_RESULT = :V_MSG_ID;
END
~
CREATE OR ALTER PROCEDURE PUT_IN_VALUE_9_1(P_SYS_ID VARCHAR(32), P_DATA_OUT_ID BIGINT, P_DATA_TYPE INTEGER, P_DATA_VALUE BLOB SUB_TYPE TEXT, P_RECORD_DATE TIMESTAMP DEFAULT NULL, P_SUBQ_ID BIGINT DEFAULT 0, P_META_INFO BLOB SUB_TYPE TEXT DEFAULT NULL, P_EXPIRE_DATE TIMESTAMP DEFAULT NULL, P_REPLACE_ID VARCHAR(100) DEFAULT NULL) RETURNS (V_RESULT BIGINT)
AS
    DECLARE V_MSG_ID      BIGINT;
    DECLARE V_DATA_IN_ID  BIGINT;
    DECLARE V_RECORD_DATE TIMESTAMP;
    DECLARE V_SUBQ_ID     BIGINT;
BEGIN
    INSERT INTO DATA_IN_MSG(DATA_VALUE, META_INFO, EXPIRE_DATE) VALUES (:P_DATA_VALUE, :P_META_INFO, :P_EXPIRE_DATE) RETURNING MSG_ID INTO :V_MSG_ID;

    INSERT INTO DATA_IN(DATA_IN_ID, SYS_ID, DATA_OUT_ID, DATA_TYPE, RECORD_DATE, SUBQ_ID, MSG_ID, REPLACE_ID) VALUES (:V_MSG_ID, :P_SYS_ID, :P_DATA_OUT_ID, :P_DATA_TYPE, COALESCE(:P_RECORD_DATE, CURRENT_TIMESTAMP), COALESCE(:P_SUBQ_ID, 0), :V_MSG_ID, :P_REPLACE_ID);
    :V_RESULT = :V_MSG_ID;
WHEN SQLSTATE '23000' DO
    BEGIN
       SELECT DATA_IN_ID, RECORD_DATE, SUBQ_ID FROM DATA_IN WHERE REPLACE_ID = :P_REPLACE_ID INTO :V_DATA_IN_ID, :V_RECORD_DATE, :V_SUBQ_ID;
       EXECUTE PROCEDURE COMMIT_IN_PROCESSING_4(:V_DATA_IN_ID, :V_RECORD_DATE, 'Message replaced!', NULL);
       INSERT INTO DATA_IN(DATA_IN_ID, SYS_ID, DATA_OUT_ID, DATA_TYPE, RECORD_DATE, SUBQ_ID, MSG_ID, REPLACE_ID) VALUES (:V_DATA_IN_ID, :P_SYS_ID, :P_DATA_OUT_ID, :P_DATA_TYPE, COALESCE(:P_RECORD_DATE, CURRENT_TIMESTAMP), COALESCE(:V_SUBQ_ID, 0), :V_MSG_ID, :P_REPLACE_ID);
       :V_RESULT = :V_MSG_ID;
    END
END
~
CREATE OR ALTER PROCEDURE SEND_OUT_TRANS_1(P_TRANS_ID VARCHAR(50))
AS
BEGIN
    INSERT INTO DATA_OUT(SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, TRANS_TTL) SELECT SYS_ID, DATA_TYPE, RECORD_DATE, MSG_ID, REPLACE_ID, TRANS_ID, TRANS_SEQ_NO, '3000-01-01 00:00:00' FROM DATA_OUT WHERE TRANS_ID = :P_TRANS_ID AND TRANS_TTL < '3000-01-01 00:00:00' ORDER BY TRANS_SEQ_NO;
    DELETE FROM DATA_OUT WHERE TRANS_ID = :P_TRANS_ID AND TRANS_TTL < '3000-01-01 00:00:00';
END
~
CREATE OR ALTER PROCEDURE MOVE_DATA_IN_TO_LOG(P_ROWS INTEGER DEFAULT 1)
RETURNS (V_COUNT BIGINT)
AS
   DECLARE V_DATA_IN_ID BIGINT;
   DECLARE V_TRANSFER_DATE TIMESTAMP;
BEGIN
    V_COUNT = 0;
    L1: WHILE (V_COUNT < P_ROWS) DO
    BEGIN
        SELECT FIRST 1 DATA_IN_ID, TRANSFER_DATE FROM DATA_IN_LOG WITH LOCK INTO :V_DATA_IN_ID, :V_TRANSFER_DATE;
        IF (:V_DATA_IN_ID IS NULL) THEN
			LEAVE L1;

        INSERT INTO DATA_IN_LOG_ARCHIVE
        (
            DATA_IN_ID,
            DATA_OUT_ID,
            SYS_ID,
            DATA_TYPE,
            RECORD_DATE,
            TRANSFER_DATE,
            SUBQ_ID,
            MSG_ID,
            REPLACE_ID
        )
        SELECT
            DATA_IN_ID,
            DATA_OUT_ID,
            SYS_ID,
            DATA_TYPE,
            RECORD_DATE,
            TRANSFER_DATE,
            SUBQ_ID,
            MSG_ID,
            REPLACE_ID
        FROM DATA_IN_LOG
        WHERE DATA_IN_ID = :V_DATA_IN_ID AND TRANSFER_DATE = :V_TRANSFER_DATE;

        DELETE FROM DATA_IN_LOG WHERE DATA_IN_ID = :V_DATA_IN_ID AND TRANSFER_DATE = :V_TRANSFER_DATE;

        V_COUNT = V_COUNT + 1; 
    END
    SUSPEND;
WHEN ANY DO
    BEGIN
        SUSPEND;
    END
END
~
CREATE OR ALTER PROCEDURE MOVE_DATA_OUT_TO_LOG(P_ROWS INTEGER DEFAULT 1) 
RETURNS (V_COUNT BIGINT)
AS
   DECLARE V_TMP BIGINT;
   DECLARE V_TRANS_ID VARCHAR(50);
   DECLARE V_DATA_OUT_ID BIGINT;
   DECLARE V_TRANSFER_DATE TIMESTAMP;
BEGIN
    V_COUNT = 0;
    V_TMP = 0;
    L1: WHILE (V_TMP < P_ROWS) DO
    BEGIN
        SELECT FIRST 1 DATA_OUT_ID, TRANSFER_DATE FROM DATA_OUT_LOG WITH LOCK INTO :V_DATA_OUT_ID, :V_TRANSFER_DATE;
        IF (:V_DATA_OUT_ID IS NULL) THEN
			LEAVE L1;

        INSERT INTO DATA_OUT_LOG_ARCHIVE
        (
            DATA_OUT_ID,
            SYS_ID,
            DATA_TYPE,
            RECORD_DATE,
            TRANSFER_DATE,
            MSG_ID,
            REPLACE_ID
        )
        SELECT
            DATA_OUT_ID,
            SYS_ID,
            DATA_TYPE,
            RECORD_DATE,
            TRANSFER_DATE,
            MSG_ID,
            REPLACE_ID
        FROM DATA_OUT_LOG
        WHERE DATA_OUT_ID = :V_DATA_OUT_ID AND TRANSFER_DATE = :V_TRANSFER_DATE;

        DELETE FROM DATA_OUT_LOG WHERE DATA_OUT_ID = :V_DATA_OUT_ID AND TRANSFER_DATE = :V_TRANSFER_DATE;

        V_COUNT = V_COUNT + 1;
        V_TMP = V_TMP + 1;
    END

    V_TMP = 0;
    L2: WHILE (V_TMP < P_ROWS) DO
    BEGIN
        SELECT FIRST 1 DATA_OUT_ID, TRANS_ID FROM DATA_OUT WHERE TRANS_TTL < CURRENT_TIMESTAMP WITH LOCK INTO :V_DATA_OUT_ID, :V_TRANS_ID;
        IF (:V_DATA_OUT_ID IS NULL) THEN
			LEAVE L2;

        EXECUTE PROCEDURE COMMIT_OUT_PROCESSING_3(:V_DATA_OUT_ID, 'Trans lost! TransId = {' || :V_TRANS_ID || '}' , NULL);

        V_COUNT = V_COUNT + 1;
        V_TMP = V_TMP + 1;
    END

    SUSPEND;
WHEN ANY DO
    BEGIN
        SUSPEND;
    END
END
~
CREATE OR ALTER PROCEDURE GET_VALUE(P_SYS_ID VARCHAR(4000) DEFAULT NULL, P_DATA_TYPES VARCHAR(4000) DEFAULT NULL, P_SUBQ_ID BIGINT DEFAULT 0) RETURNS
(
  ROW_ID VARCHAR(128),
  DATA_IN_ID BIGINT,
  DATA_OUT_ID BIGINT,
  SYS_ID VARCHAR(32),
  SYS_2_ID VARCHAR(32),
  DATA_TYPE INTEGER,
  DATA_VALUE BLOB SUB_TYPE TEXT,
  META_INFO BLOB SUB_TYPE TEXT,
  RECORD_DATE TIMESTAMP,
  EXPIRE_DATE TIMESTAMP,
  REPLACE_ID VARCHAR(100)
)
AS
BEGIN
    EXECUTE PROCEDURE GET_IN_VALUE_3_11(:P_SYS_ID, :P_DATA_TYPES, :P_SUBQ_ID) RETURNING_VALUES :ROW_ID, :DATA_IN_ID, :DATA_OUT_ID, :SYS_ID, :SYS_2_ID, :DATA_TYPE, :DATA_VALUE, :META_INFO, :RECORD_DATE, :EXPIRE_DATE, :REPLACE_ID;
END
~
CREATE OR ALTER PROCEDURE PUT_VALUE(P_SYS_ID VARCHAR(32), P_DATA_TYPE INTEGER, P_DATA_VALUE BLOB SUB_TYPE TEXT, P_META_INFO BLOB SUB_TYPE TEXT DEFAULT NULL, P_EXPIRE_DATE TIMESTAMP DEFAULT NULL, P_REPLACE_ID VARCHAR(100) DEFAULT NULL, P_TRANS_ID VARCHAR(50) DEFAULT NULL, P_TRANS_SEQ_NO BIGINT DEFAULT NULL, P_TRANS_TTL_SECONDS BIGINT DEFAULT 3600) RETURNS (V_RESULT BIGINT)
AS
BEGIN
	EXECUTE PROCEDURE PUT_OUT_VALUE_9_1(:P_SYS_ID, :P_DATA_TYPE, :P_DATA_VALUE, :P_META_INFO, :P_EXPIRE_DATE, :P_REPLACE_ID, :P_TRANS_ID, :P_TRANS_SEQ_NO, :P_TRANS_TTL_SECONDS) RETURNING_VALUES :V_RESULT;
END
~
CREATE OR ALTER PROCEDURE COMMIT_PROCESSING(P_DATA_IN_ID BIGINT, P_RECORD_DATE TIMESTAMP, P_ERROR_TEXT BLOB SUB_TYPE TEXT DEFAULT NULL, P_ROW_ID VARCHAR(128) DEFAULT NULL)
AS
BEGIN
	EXECUTE PROCEDURE COMMIT_IN_PROCESSING_4(:P_DATA_IN_ID, :P_RECORD_DATE, :P_ERROR_TEXT, :P_ROW_ID);
END
~
CREATE OR ALTER PROCEDURE ROLLBACK_PROCESSING(P_DATA_IN_ID BIGINT, P_ERROR_CODE INTEGER, P_ERROR_TEXT BLOB SUB_TYPE TEXT, P_ROW_ID VARCHAR(128) DEFAULT NULL)
AS
BEGIN
	EXECUTE PROCEDURE ROLLBACK_IN_PROCESSING_4(:P_DATA_IN_ID, :P_ERROR_CODE, :P_ERROR_TEXT, :P_ROW_ID);
END
~
CREATE OR ALTER PROCEDURE SEND_OUT_TRANS(P_TRANS_ID VARCHAR(50))
AS
BEGIN
    EXECUTE PROCEDURE SEND_OUT_TRANS_1(:P_TRANS_ID);
END
~
CREATE ROLE Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON PROCEDURE SEND_OUT_TRANS TO ROLE Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON PROCEDURE GET_VALUE TO ROLE Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON PROCEDURE PUT_VALUE TO ROLE Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON PROCEDURE COMMIT_PROCESSING TO ROLE Q_<SYSID>_CLI_ROLE
~
GRANT EXECUTE ON PROCEDURE ROLLBACK_PROCESSING TO ROLE Q_<SYSID>_CLI_ROLE
~
CREATE ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE SEND_OUT_TRANS_1 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE GET_IN_VALUE_3_11 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE GET_OUT_VALUE_2_11 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE PUT_OUT_VALUE_9_1 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE PUT_IN_VALUE_9_1 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE COMMIT_IN_PROCESSING_4 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE COMMIT_OUT_PROCESSING_3 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE ROLLBACK_IN_PROCESSING_4 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE ROLLBACK_OUT_PROCESSING_4 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE MOVE_DATA_IN_TO_LOG TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE MOVE_DATA_OUT_TO_LOG TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE CHANGE_IN_SUBQ_3 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT Q_<SYSID>_SVC_ROLE TO USER Q_<SYSID>_SVC
~
GRANT SELECT, UPDATE ON DATA_IN TO PROCEDURE CHANGE_IN_SUBQ_3
~
GRANT SELECT ON DATA_IN TO PROCEDURE GET_IN_VALUE_3_11
~
GRANT SELECT ON DATA_IN_MSG TO PROCEDURE GET_IN_VALUE_3_11
~
GRANT SELECT ON DATA_OUT TO PROCEDURE GET_OUT_VALUE_2_11
~
GRANT SELECT ON DATA_OUT_MSG TO PROCEDURE GET_OUT_VALUE_2_11
~
GRANT SELECT ON EXT_TYPES TO PROCEDURE PUT_OUT_VALUE_9_1
~
GRANT INSERT, SELECT ON DATA_OUT TO PROCEDURE PUT_OUT_VALUE_9_1
~
GRANT INSERT ON DATA_OUT_MSG TO PROCEDURE PUT_OUT_VALUE_9_1
~
GRANT INSERT, SELECT ON DATA_IN TO PROCEDURE PUT_IN_VALUE_9_1
~
GRANT INSERT ON DATA_IN_MSG TO PROCEDURE PUT_IN_VALUE_9_1
~
GRANT EXECUTE ON PROCEDURE COMMIT_IN_PROCESSING_4 TO PROCEDURE PUT_IN_VALUE_9_1
~
GRANT INSERT ON DATA_IN_LOG TO PROCEDURE COMMIT_IN_PROCESSING_4
~
GRANT INSERT ON DATA_IN_ERRORS TO PROCEDURE COMMIT_IN_PROCESSING_4
~
GRANT SELECT, DELETE ON DATA_IN TO PROCEDURE COMMIT_IN_PROCESSING_4
~
GRANT INSERT ON DATA_IN_ERRORS TO PROCEDURE ROLLBACK_IN_PROCESSING_4
~
GRANT INSERT ON DATA_OUT_LOG TO PROCEDURE COMMIT_OUT_PROCESSING_3
~
GRANT INSERT ON DATA_OUT_ERRORS TO PROCEDURE COMMIT_OUT_PROCESSING_3
~
GRANT SELECT, DELETE ON DATA_OUT TO PROCEDURE COMMIT_OUT_PROCESSING_3
~
GRANT INSERT ON DATA_OUT_ERRORS TO PROCEDURE ROLLBACK_OUT_PROCESSING_4
~
GRANT SELECT, UPDATE, DELETE ON DATA_IN_LOG TO PROCEDURE MOVE_DATA_IN_TO_LOG
~
GRANT INSERT ON DATA_IN_LOG_ARCHIVE TO PROCEDURE MOVE_DATA_IN_TO_LOG
~
GRANT SELECT, UPDATE ON DATA_OUT TO PROCEDURE MOVE_DATA_OUT_TO_LOG
~
GRANT SELECT, INSERT, DELETE ON DATA_OUT TO PROCEDURE SEND_OUT_TRANS_1
~
GRANT SELECT, UPDATE, DELETE ON DATA_OUT_LOG TO PROCEDURE MOVE_DATA_OUT_TO_LOG
~
GRANT INSERT ON DATA_OUT_LOG_ARCHIVE TO PROCEDURE MOVE_DATA_OUT_TO_LOG
~
GRANT EXECUTE ON PROCEDURE SEND_OUT_TRANS_1 TO PROCEDURE SEND_OUT_TRANS
~
GRANT EXECUTE ON PROCEDURE GET_IN_VALUE_3_11 TO PROCEDURE GET_VALUE
~
GRANT EXECUTE ON PROCEDURE PUT_OUT_VALUE_9_1 TO PROCEDURE PUT_VALUE
~
GRANT EXECUTE ON PROCEDURE COMMIT_IN_PROCESSING_4 TO PROCEDURE COMMIT_PROCESSING
~
GRANT EXECUTE ON PROCEDURE ROLLBACK_IN_PROCESSING_4 TO PROCEDURE ROLLBACK_PROCESSING
~
GRANT EXECUTE ON PROCEDURE COMMIT_OUT_PROCESSING_3 TO PROCEDURE MOVE_DATA_OUT_TO_LOG
~
