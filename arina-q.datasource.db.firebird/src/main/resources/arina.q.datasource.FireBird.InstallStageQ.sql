CREATE TABLE STAGES_MSG
(
  MSG_ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
  STAGE_XML BLOB SUB_TYPE TEXT,
  META_INFO BLOB SUB_TYPE TEXT
)
~
CREATE TABLE STAGES
(
  REQUEST_ID BIGINT NOT NULL PRIMARY KEY,
  REQUEST_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  MSG_ID BIGINT NOT NULL,
  EXT_ID VARCHAR(50),
  SYS_ID VARCHAR(50),
  STAGE_DATE TIMESTAMP NOT NULL,
  STAGE VARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  PROCESS_AFTER TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  DEP_ID VARCHAR(100),
  PARENT_DEP_ID VARCHAR(4000)
)
~
CREATE INDEX I_STAGES_1 ON STAGES (PROCESS_AFTER, STAGE, SYS_ID)
~
CREATE INDEX I_STAGES_2 ON STAGES (DEP_ID)
~
CREATE TABLE STAGES_LOG
(
  REQUEST_ID BIGINT NOT NULL,
  REQUEST_DATE TIMESTAMP NOT NULL,
  MSG_ID BIGINT NOT NULL,
  EXT_ID VARCHAR(50),
  SYS_ID VARCHAR(50),
  STAGE_DATE TIMESTAMP NOT NULL,
  STAGE VARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  PROCESS_AFTER TIMESTAMP NOT NULL,
  DEP_ID  VARCHAR(100),
  PARENT_DEP_ID  VARCHAR(4000),
  TRANSFER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  FINAL INTEGER DEFAULT 0 NOT NULL CHECK (FINAL IN(1, 0))
)
~
CREATE INDEX I_STAGES_LOG_1 ON STAGES_LOG (REQUEST_ID)
~
CREATE TABLE STAGES_LOG_ARCHIVE
(
  REQUEST_ID BIGINT NOT NULL,
  REQUEST_DATE TIMESTAMP NOT NULL,
  MSG_ID BIGINT NOT NULL,
  EXT_ID VARCHAR(50),
  SYS_ID VARCHAR(50),
  STAGE_DATE TIMESTAMP NOT NULL,
  STAGE VARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  PROCESS_AFTER TIMESTAMP NOT NULL,
  DEP_ID  VARCHAR(100),
  PARENT_DEP_ID  VARCHAR(4000),
  TRANSFER_DATE TIMESTAMP NOT NULL,
  FINAL INTEGER NOT NULL
)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_1 ON STAGES_LOG_ARCHIVE (REQUEST_ID, FINAL)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_2 ON STAGES_LOG_ARCHIVE (REQUEST_DATE)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_3 ON STAGES_LOG_ARCHIVE (EXT_ID, SYS_ID)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_4 ON STAGES_LOG_ARCHIVE (STAGE_DATE, REQUEST_ID)
~
CREATE INDEX I_STAGES_LOG_ARCHIVE_5 ON STAGES_LOG_ARCHIVE (TRANSFER_DATE)
~
CREATE TABLE STAGES_ERRORS
(
  REQUEST_ID BIGINT NOT NULL,
  STAGE VARCHAR(50) NOT NULL,
  ITERATION BIGINT NOT NULL,
  ERROR_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  ERROR_CODE INTEGER DEFAULT 0 NOT NULL,
  ERROR_TEXT BLOB SUB_TYPE TEXT
)
~
CREATE INDEX I_STAGES_ERRORS_1 ON STAGES_ERRORS (REQUEST_ID, STAGE)
~
CREATE INDEX I_STAGES_ERRORS_2 ON STAGES_ERRORS (ERROR_CODE)
~
CREATE INDEX I_STAGES_ERRORS_3 ON STAGES_ERRORS (ERROR_DATE)
~
CREATE TABLE STAGES_DEPS
(
  REQUEST_ID BIGINT NOT NULL,
  PARENT_REQUEST_ID BIGINT NOT NULL
)
~
CREATE INDEX I_STAGES_DEPS_1 ON STAGES_DEPS (REQUEST_ID)
~
CREATE INDEX I_STAGES_DEPS_2 ON STAGES_DEPS (PARENT_REQUEST_ID)
~
ALTER TABLE STAGES_DEPS ADD
 FOREIGN KEY (REQUEST_ID)
 REFERENCES STAGES (REQUEST_ID)
 ON DELETE CASCADE
~
ALTER TABLE STAGES_DEPS ADD
 FOREIGN KEY (PARENT_REQUEST_ID)
 REFERENCES STAGES (REQUEST_ID)
 ON DELETE CASCADE
~
CREATE OR ALTER PROCEDURE PUT_STAGE_VALUE_11_1
(
  P_EXT_ID VARCHAR(50),
  P_SYS_ID VARCHAR(50),
  P_REQUEST_ID BIGINT,
  P_STAGE_XML BLOB SUB_TYPE TEXT,
  P_STAGE VARCHAR(50),
  P_PROCESS_AFTER_DELAY BIGINT,
  P_FINAL INTEGER,
  P_DEP_ID VARCHAR(100),
  P_PARENT_DEP_ID VARCHAR(4000),
  P_META_INFO BLOB SUB_TYPE TEXT
) RETURNS (V_RESULT BIGINT)
AS
    DECLARE TMP VARCHAR(100);
    DECLARE POS INTEGER;
    DECLARE V_MSG_ID BIGINT;
    DECLARE V_TRANSFER_DATE TIMESTAMP;
BEGIN
    INSERT INTO STAGES_MSG
    (
      STAGE_XML,
      META_INFO
    )
    VALUES
    (
      :P_STAGE_XML,
      :P_META_INFO
    ) RETURNING MSG_ID INTO :V_MSG_ID;

    IF (:P_REQUEST_ID IS NULL) THEN
    BEGIN
        INSERT INTO STAGES
        (
          REQUEST_ID,
          REQUEST_DATE,
          MSG_ID,
          EXT_ID,
          SYS_ID,
          STAGE_DATE,
          STAGE,
          ITERATION,
          PROCESS_AFTER,
          DEP_ID,
          PARENT_DEP_ID
        )
        VALUES
        (
          :V_MSG_ID,
          CURRENT_TIMESTAMP,
          :V_MSG_ID,
          :P_EXT_ID,
          :P_SYS_ID,
          CURRENT_TIMESTAMP,
          :P_STAGE,
          1,
          DATEADD(:P_PROCESS_AFTER_DELAY MILLISECOND TO CURRENT_TIMESTAMP),
          :P_DEP_ID,
          :P_PARENT_DEP_ID
        );

      IF (:P_PARENT_DEP_ID IS NOT NULL) THEN
      BEGIN
          :P_PARENT_DEP_ID = REPLACE(:P_PARENT_DEP_ID, ';', ',');

          WHILE (:P_PARENT_DEP_ID != '') DO
          BEGIN
              POS = POSITION(',', :P_PARENT_DEP_ID, 1);

              IF (POS > 0) THEN
                  TMP = REPLACE(LEFT(:P_PARENT_DEP_ID, POS), ',', '');
              ELSE
                  TMP = :P_PARENT_DEP_ID;

              IF (TMP = '') THEN
                  LEAVE;

              INSERT INTO STAGES_DEPS
              (
                    REQUEST_ID,
                    PARENT_REQUEST_ID
              )
              SELECT :V_MSG_ID, REQUEST_ID
              FROM STAGES
              WHERE REQUEST_ID < :V_MSG_ID AND DEP_ID = :TMP;

              IF (POS < 1) THEN
                  LEAVE;

              :P_PARENT_DEP_ID = SUBSTRING(:P_PARENT_DEP_ID FROM POS + 1);
          END
      END
    END
    ELSE
    BEGIN
        :V_TRANSFER_DATE = CURRENT_TIMESTAMP;

        INSERT INTO STAGES_LOG
        (
          REQUEST_ID,
          REQUEST_DATE,
          MSG_ID,
          EXT_ID,
          SYS_ID,
          STAGE_DATE,
          STAGE,
          ITERATION,
          PROCESS_AFTER,
          TRANSFER_DATE,
          DEP_ID,
          PARENT_DEP_ID
        )
        SELECT
          REQUEST_ID,
          REQUEST_DATE,
          MSG_ID,
          EXT_ID,
          SYS_ID,
          STAGE_DATE,
          STAGE,
          ITERATION,
          PROCESS_AFTER,
          :V_TRANSFER_DATE,
          DEP_ID,
          PARENT_DEP_ID
        FROM STAGES
        WHERE REQUEST_ID = :P_REQUEST_ID;

      IF (:P_FINAL != 0) THEN
      BEGIN
            INSERT INTO STAGES_LOG_ARCHIVE
            (
              REQUEST_ID,
              REQUEST_DATE,
              MSG_ID,
              EXT_ID,
              SYS_ID,
              STAGE_DATE,
              STAGE,
              ITERATION,
              PROCESS_AFTER,
              DEP_ID,
              PARENT_DEP_ID,
              TRANSFER_DATE,
              FINAL
            )
            SELECT
              REQUEST_ID,
              REQUEST_DATE,
              :V_MSG_ID,
              EXT_ID,
              SYS_ID,
              :V_TRANSFER_DATE,
              :P_STAGE,
              1,
              :V_TRANSFER_DATE,
              DEP_ID,
              PARENT_DEP_ID,
              :V_TRANSFER_DATE,
              :P_FINAL
            FROM STAGES
            WHERE REQUEST_ID = :P_REQUEST_ID;

            DELETE FROM STAGES
            WHERE REQUEST_ID = :P_REQUEST_ID;
      END
      ELSE
      BEGIN
            UPDATE STAGES
            SET
              STAGE_DATE = :V_TRANSFER_DATE,
              MSG_ID = :V_MSG_ID,
              STAGE = :P_STAGE,
              ITERATION = 1,
              PROCESS_AFTER = DATEADD(:P_PROCESS_AFTER_DELAY MILLISECOND TO :V_TRANSFER_DATE)
            WHERE REQUEST_ID = :P_REQUEST_ID;
      END
    END

    :V_RESULT = COALESCE(:P_REQUEST_ID, :V_MSG_ID);
END
~
CREATE OR ALTER PROCEDURE GET_STAGE_VALUE_3_10(P_STAGE VARCHAR(32), P_SYS_ID VARCHAR(32), P_RECORDS INTEGER DEFAULT 1) RETURNS
(
  ROW_ID VARCHAR(128),
  EXT_ID VARCHAR(50),
  SYS_ID VARCHAR(50),
  REQUEST_DATE TIMESTAMP,
  STAGE_DATE TIMESTAMP,
  REQUEST_ID BIGINT,
  STAGE_XML BLOB SUB_TYPE TEXT,
  META_INFO BLOB SUB_TYPE TEXT,
  STAGE VARCHAR(50),
  ITERATION BIGINT
)
AS
  DECLARE V_SQL VARCHAR(4000);
BEGIN
    V_SQL = 'SELECT FIRST ' || :P_RECORDS || ' NULL ROW_ID, EXT_ID, SYS_ID, REQUEST_DATE, STAGE_DATE, REQUEST_ID, STAGE_XML, META_INFO, STAGE, ITERATION ' ||
            'FROM STAGES, STAGES_MSG ' ||
            'WHERE STAGES.MSG_ID = STAGES_MSG.MSG_ID AND PROCESS_AFTER <= CURRENT_TIMESTAMP AND ' ||
            'STAGE LIKE ''' || :P_STAGE || ''' AND ';

   IF (P_SYS_ID IS NOT NULL) THEN
       V_SQL = V_SQL || 'SYS_ID = ''' || :P_SYS_ID || ''' AND ';

   V_SQL = V_SQL || 'NOT EXISTS (SELECT 1 FROM STAGES_DEPS WHERE STAGES_DEPS.REQUEST_ID = STAGES.REQUEST_ID) ORDER BY PROCESS_AFTER ASC';

   FOR EXECUTE STATEMENT V_SQL WITH CALLER PRIVILEGES 
   INTO :ROW_ID, :EXT_ID, :SYS_ID, :REQUEST_DATE, :STAGE_DATE, :REQUEST_ID, :STAGE_XML, :META_INFO, :STAGE, :ITERATION DO SUSPEND;
END
~
CREATE OR ALTER PROCEDURE GET_FINAL_STAGE_VALUE_1_10(P_REQUEST_ID BIGINT DEFAULT 1) RETURNS
(
  ROW_ID VARCHAR(128),
  EXT_ID VARCHAR(50),
  SYS_ID VARCHAR(50),
  REQUEST_DATE TIMESTAMP,
  STAGE_DATE TIMESTAMP,
  REQUEST_ID BIGINT,
  STAGE_XML BLOB SUB_TYPE TEXT,
  META_INFO BLOB SUB_TYPE TEXT,
  STAGE VARCHAR(50),
  ITERATION BIGINT
)
AS
  DECLARE V_SQL VARCHAR(4000);
BEGIN
    V_SQL = 'SELECT FIRST 1 NULL ROW_ID, EXT_ID, SYS_ID, REQUEST_DATE, STAGE_DATE, REQUEST_ID, STAGE_XML, META_INFO, STAGE, ITERATION ' ||
            'FROM STAGES_LOG_ARCHIVE, STAGES_MSG ' ||
            'WHERE STAGES_LOG_ARCHIVE.MSG_ID = STAGES_MSG.MSG_ID AND REQUEST_ID = :P_REQUEST_ID AND FINAL = 1';

   FOR EXECUTE STATEMENT (V_SQL) (P_REQUEST_ID := :P_REQUEST_ID) WITH CALLER PRIVILEGES 
   INTO :ROW_ID, :EXT_ID, :SYS_ID, :REQUEST_DATE, :STAGE_DATE, :REQUEST_ID, :STAGE_XML, :META_INFO, :STAGE, :ITERATION DO SUSPEND;
END
~
CREATE OR ALTER PROCEDURE COMMIT_STAGE_PROCESSING_8(P_STAGE_DATE TIMESTAMP, P_REQUEST_ID BIGINT, P_ERROR_CODE INTEGER DEFAULT 0, P_ERROR_TEXT BLOB SUB_TYPE TEXT DEFAULT NULL, P_PROCESS_AFTER_DELAY BIGINT DEFAULT NULL, P_ROW_ID VARCHAR(128) DEFAULT NULL)
AS
BEGIN
    IF (:P_ERROR_TEXT IS NOT NULL)
    THEN BEGIN
        INSERT INTO STAGES_ERRORS (REQUEST_ID, STAGE, ITERATION, ERROR_DATE, ERROR_CODE, ERROR_TEXT)
        SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP, :P_ERROR_CODE, :P_ERROR_TEXT FROM STAGES WHERE REQUEST_ID = :P_REQUEST_ID AND STAGE_DATE = :P_STAGE_DATE;

        IF (ROW_COUNT = 0) THEN
            INSERT INTO STAGES_ERRORS (REQUEST_ID, STAGE, ITERATION, ERROR_DATE, ERROR_CODE, ERROR_TEXT)
            SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP, :P_ERROR_CODE, :P_ERROR_TEXT FROM STAGES_LOG WHERE REQUEST_ID = :P_REQUEST_ID AND STAGE_DATE = :P_STAGE_DATE
            UNION ALL
            SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP, :P_ERROR_CODE, :P_ERROR_TEXT FROM STAGES_LOG_ARCHIVE WHERE REQUEST_ID = :P_REQUEST_ID AND STAGE_DATE = :P_STAGE_DATE;
    END

    UPDATE STAGES
    SET
        ITERATION = ITERATION + 1,
        PROCESS_AFTER = DATEADD(:P_PROCESS_AFTER_DELAY MILLISECOND TO CURRENT_TIMESTAMP)
    WHERE REQUEST_ID = :P_REQUEST_ID AND STAGE_DATE = :P_STAGE_DATE;
END
~
CREATE OR ALTER PROCEDURE ROLLBACK_STAGE_PROCESSING_6(P_STAGE_DATE TIMESTAMP, P_REQUEST_ID BIGINT, P_ERROR_CODE INTEGER, P_ERROR_TEXT BLOB SUB_TYPE TEXT DEFAULT NULL, P_ROW_ID VARCHAR(128) DEFAULT NULL)
AS
BEGIN
    INSERT INTO STAGES_ERRORS (REQUEST_ID, STAGE, ITERATION, ERROR_DATE, ERROR_CODE, ERROR_TEXT)
    SELECT REQUEST_ID, STAGE, ITERATION, CURRENT_TIMESTAMP, :P_ERROR_CODE, :P_ERROR_TEXT FROM STAGES WHERE REQUEST_ID = :P_REQUEST_ID AND STAGE_DATE = :P_STAGE_DATE;
END
~
CREATE OR ALTER PROCEDURE MOVE_STAGE_TO_LOG(P_ROWS INTEGER DEFAULT 1) 
RETURNS (V_COUNT BIGINT)
AS
   DECLARE V_REQUEST_ID BIGINT;
   DECLARE V_STAGE_DATE TIMESTAMP;
BEGIN
    V_COUNT = 0;
    L1: WHILE (V_COUNT < P_ROWS) DO
    BEGIN
        SELECT FIRST 1 REQUEST_ID, STAGE_DATE FROM STAGES_LOG WITH LOCK INTO :V_REQUEST_ID, :V_STAGE_DATE;
        IF (:V_REQUEST_ID IS NULL) THEN
			LEAVE L1;

        INSERT INTO STAGES_LOG_ARCHIVE
        (
               REQUEST_ID,
               REQUEST_DATE,
               MSG_ID,
               EXT_ID,
               SYS_ID,
               STAGE_DATE,
               STAGE,
               ITERATION,
               PROCESS_AFTER,
               DEP_ID,
               PARENT_DEP_ID,
               TRANSFER_DATE,
               FINAL
        )
        SELECT REQUEST_ID,
               REQUEST_DATE,
               MSG_ID,
               EXT_ID,
               SYS_ID,
               STAGE_DATE,
               STAGE,
               ITERATION,
               PROCESS_AFTER,
               DEP_ID,
               PARENT_DEP_ID,
               TRANSFER_DATE,
               FINAL
        FROM STAGES_LOG
        WHERE REQUEST_ID = :V_REQUEST_ID AND STAGE_DATE = :V_STAGE_DATE;

        DELETE FROM STAGES_LOG WHERE REQUEST_ID = :V_REQUEST_ID AND STAGE_DATE = :V_STAGE_DATE;

        V_COUNT = V_COUNT + 1; 
    END
    SUSPEND;
WHEN ANY DO
    BEGIN
        SUSPEND;
    END
END
~
GRANT EXECUTE ON PROCEDURE PUT_STAGE_VALUE_11_1 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE COMMIT_STAGE_PROCESSING_8 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE ROLLBACK_STAGE_PROCESSING_6 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE GET_STAGE_VALUE_3_10 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE GET_FINAL_STAGE_VALUE_1_10 TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT EXECUTE ON PROCEDURE MOVE_STAGE_TO_LOG TO ROLE Q_<SYSID>_SVC_ROLE
~
GRANT SELECT, INSERT, UPDATE, DELETE ON STAGES TO PROCEDURE PUT_STAGE_VALUE_11_1
~
GRANT INSERT ON STAGES_LOG TO PROCEDURE PUT_STAGE_VALUE_11_1
~
GRANT INSERT ON STAGES_LOG_ARCHIVE TO PROCEDURE PUT_STAGE_VALUE_11_1
~
GRANT INSERT ON STAGES_DEPS TO PROCEDURE PUT_STAGE_VALUE_11_1
~
GRANT INSERT ON STAGES_MSG TO PROCEDURE PUT_STAGE_VALUE_11_1
~
GRANT SELECT ON STAGES TO PROCEDURE GET_STAGE_VALUE_3_10
~
GRANT SELECT ON STAGES_DEPS TO PROCEDURE GET_STAGE_VALUE_3_10
~
GRANT SELECT ON STAGES_MSG TO PROCEDURE GET_STAGE_VALUE_3_10
~
GRANT SELECT ON STAGES_LOG_ARCHIVE TO PROCEDURE GET_FINAL_STAGE_VALUE_1_10
~
GRANT SELECT ON STAGES_MSG TO PROCEDURE GET_FINAL_STAGE_VALUE_1_10
~
GRANT SELECT, UPDATE ON STAGES TO PROCEDURE COMMIT_STAGE_PROCESSING_8
~
GRANT SELECT ON STAGES_LOG TO PROCEDURE COMMIT_STAGE_PROCESSING_8
~
GRANT SELECT ON STAGES_LOG_ARCHIVE TO PROCEDURE COMMIT_STAGE_PROCESSING_8
~
GRANT INSERT ON STAGES_ERRORS TO PROCEDURE COMMIT_STAGE_PROCESSING_8
~
GRANT INSERT ON STAGES_ERRORS TO PROCEDURE ROLLBACK_STAGE_PROCESSING_6
~
GRANT SELECT ON STAGES TO PROCEDURE ROLLBACK_STAGE_PROCESSING_6
~
GRANT SELECT, UPDATE, DELETE ON STAGES_LOG TO PROCEDURE MOVE_STAGE_TO_LOG
~
GRANT INSERT ON STAGES_LOG_ARCHIVE TO PROCEDURE MOVE_STAGE_TO_LOG
~
